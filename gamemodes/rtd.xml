<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet href="file:///C|/develop/samp/rtd/qawno/xml/pawndoc.xsl" type="text/xsl"?>
<doc source="C:\develop\samp\rtd\gamemodes\rtd.pwn">
	<assembly>
		<name>rtd.pwn</name>
	</assembly>

	<!-- general -->
	<general>
		<library  name="sscanf"  summary="Extracts structured information from strings."  license="Copyright (c) 2022 Alex &quot;Y_Less&quot; Cole.  Licensed under MPL 1.1"  >  <summary pawndoc="true">  This library uses the enhanced <em>pawndoc.xsl</em> from  <a href="https://github.com/pawn-lang/pawndoc">pawn-lang/pawndoc</a>.  This XSL has features such as library and markdown support, and will not  render this message when used.  </summary>  <remarks>  This is the <em>sscanf</em> plugin, which provides the <c>sscanf</c>  function to extract basic structured data from strings.  This is slightly  different to regular expressions, but both have their place.  A regular  expression gives you total control over the exact structure of data down  to the character level; however, extracting structured data like numbers  using it is tricky.  Conversely this gives slightly higher-level  <em>specifiers</em> which can easily extract data types, at the expense  of fine-grained control.  To convert a string in to two numbers would  look like:  <code>  new num1, num2;                                                          <br />  sscanf("45 100", "ii", num1, num2);  </code>  <c>ii</c> is the specifier string, which here means "integer integer";  stating that the input string should be two whole numbers in a row (which  is - <c>"45 100"</c>).  <c>num1</c> and <c>num2</c> are the destination  variables to store the found numbers in (after conversion from strings).  You can check if the conversion failed by looking for a non-naught return  value:  <code>  new num1, num2;                                                          <br />  if (sscanf("hello 100", "ii", num1, num2))                               <br />  {                                                                        <br /><indent />  printf("The input was not two numbers.");                            <br />  }  </code>  This will fail because <c>"hello"</c> is not a whole number (or indeed  any type of number at all).  For more information on using the function  refer to the tutorials or the reference documentation in  <a href="https://github.com/Y-Less/sscanf/blob/master/README.md">the  attached readme</a>.  </remarks>  </library> <p/> <p/><p/> Copyright (c) 2013-2014, Dan  All rights reserved.  Redistribution and use in source and binary forms, with or without  modification, are permitted provided that the following conditions are met:   1. Redistributions of source code must retain the above copyright notice, this  list of conditions and the following disclaimer.   2. Redistributions in binary form must reproduce the above copyright notice,  this list of conditions and the following disclaimer in the documentation  and/or other materials provided with the distribution.   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. <p/> <version>1.5</version>  <remarks>Supported parameters:  a, A = arrays (must be followed by an integer - array's szie);  b, B = boolean; c, C = character; d, D, i, I = integer;  s, S = string; p, P = player's ID, t, T = timer's ID  </remarks> <p/> <summary>Same KillTimer is used for all types of timer.</summary> <p/> <summary>Improved GetTickCount (more accurate).</summary>  <returns>Current time in miliseconds.</returns> <p/> <summary>Basic SetTimer.</summary>  <param name="func">Name of the public function to call.</param>  <param name="interval">Interval in milliseconds.</param>  <param name="repeating">Whether this timer will repeat or will execute only one time.</param>  <returns>The ID of the timer.</returns> <p/> <summary>Basic SetTimerEx.</summary>  <param name="func">Name of the public function to call.</param>  <param name="interval">Interval in milliseconds.</param>  <param name="repeating">Whether this timer will repeat or will execute only one time.</param>  <param name="format">Special format indicating the types of values the timer will pass.</param>  <returns>The ID of the timer.</returns> 
	</general>

	<members>

		<!-- enumerations -->
		<member name="T:CAOBJECTINFO" value="4">
			<tagname value="CAOBJECTINFO"/>
			<member name="C:ColdAndreadsID" value="0">
			</member>
			<member name="C:ObjectID" value="1">
			</member>
			<member name="C:ObjectType" value="2">
			</member>
			<member name="C:ObjectUsed" value="3">
				<tagname value="bool"/>
			</member>
		</member>
		<member name="T:ECPInfo" value="10">
			<tagname value="ECPInfo"/>
			<member name="C:cp_player" value="0">
			</member>
			<member name="C:cp_team" value="1">
			</member>
			<member name="C:occupied" value="2">
				<tagname value="bool"/>
			</member>
			<member name="C:cp_x" value="3">
				<tagname value="Float"/>
			</member>
			<member name="C:cp_y" value="4">
				<tagname value="Float"/>
			</member>
			<member name="C:cp_z" value="5">
				<tagname value="Float"/>
			</member>
			<member name="C:cp_mapicon" value="6">
			</member>
			<member name="C:cp_bomb_timer" value="7">
			</member>
			<member name="C:cp_defuse_timer" value="8">
			</member>
			<member name="C:is_active" value="9">
				<tagname value="bool"/>
			</member>
		</member>
		<member name="T:EClassInfo" value="38">
			<tagname value="EClassInfo"/>
			<member name="C:x" value="0">
				<tagname value="Float"/>
			</member>
			<member name="C:y" value="1">
				<tagname value="Float"/>
			</member>
			<member name="C:z" value="2">
				<tagname value="Float"/>
			</member>
			<member name="C:a" value="3">
				<tagname value="Float"/>
			</member>
			<member name="C:title" value="4">
				<size value="32"/>
			</member>
			<member name="C:skin" value="36">
			</member>
			<member name="C:color" value="37">
			</member>
		</member>
		<member name="T:EPerkInfo" value="18">
			<tagname value="EPerkInfo"/>
			<member name="C:perk_health" value="0">
			</member>
			<member name="C:perk_armour" value="1">
			</member>
			<member name="C:perk_weapons" value="2">
				<size value="3"/>
			</member>
			<member name="C:perk_weapon_ammo" value="5">
				<size value="3"/>
			</member>
			<member name="C:perk_title" value="8">
				<size value="10"/>
			</member>
		</member>
		<member name="T:EPickupInfo" value="8">
			<tagname value="EPickupInfo"/>
			<member name="C:is_picked_up" value="0">
				<tagname value="bool"/>
			</member>
			<member name="C:picked_up_by_team" value="1">
			</member>
			<member name="C:pickup_x" value="2">
				<tagname value="Float"/>
			</member>
			<member name="C:pickup_y" value="3">
				<tagname value="Float"/>
			</member>
			<member name="C:pickup_z" value="4">
				<tagname value="Float"/>
			</member>
			<member name="C:pickup_object" value="5">
			</member>
			<member name="C:pickup_mapicon" value="6">
			</member>
			<member name="C:pickup_timer" value="7">
			</member>
		</member>
		<member name="T:EPlayerInfo" value="9">
			<tagname value="EPlayerInfo"/>
			<member name="C:is_player_spawned" value="0">
				<tagname value="bool"/>
			</member>
			<member name="C:kills" value="1">
			</member>
			<member name="C:deaths" value="2">
			</member>
			<member name="C:is_carrying_bomb" value="3">
				<tagname value="bool"/>
			</member>
			<member name="C:current_textdraw" value="4">
				<tagname value="PlayerText"/>
			</member>
			<member name="C:player_vehicle" value="5">
			</member>
			<member name="C:player_perk" value="6">
			</member>
			<member name="C:player_change_team" value="7">
				<tagname value="bool"/>
			</member>
			<member name="C:player_drunk_timer" value="8">
			</member>
		</member>
		<member name="T:EPlayerLastDamagerInfo" value="2">
			<tagname value="EPlayerLastDamagerInfo"/>
			<member name="C:player_last_damagerid" value="0">
			</member>
			<member name="C:player_last_damagerid_weapon" value="1">
			</member>
		</member>
		<member name="T:ESkillInfo" value="5">
			<tagname value="ESkillInfo"/>
			<member name="C:skill_king_charges" value="0">
				<size value="5"/>
			</member>
		</member>

		<!-- constants -->
		<member name="C:SSCANF_VERSION" value="135944">
			<library>sscanf</library>  <remarks>  The sscanf version in BCD as a proper constant.  Example:  <code>  2.10.3  <br />  => 02 10 03 <br />  => 0x021003  </code>  </remarks> 
		</member>
		<member name="C:__PawnBuild" value="11">
		</member>
		<member name="C:__line" value="960">
			<referrer name="pc_cmd_cjump"/>
		</member>
		<member name="C:cellmax" value="2147483647">
			<referrer name="operator!(Float:)"/>
		</member>
		<member name="C:cellmin" value="-2147483648">
			<referrer name="operator-(Float:)"/>
			<referrer name="SSCANF_GetSimilarString"/>
			<referrer name="SSCANF_GetSimilarValue"/>
			<referrer name="SSCANF_GetClosestString"/>
			<referrer name="SSCANF_GetClosestValue"/>
		</member>
		<member name="C:false" value="0">
			<tagname value="bool"/>
			<referrer name="CA_CreateObject_DC"/>
			<referrer name="CA_DestroyObject_DC"/>
			<referrer name="SSCANF_OnGameModeInit"/>
			<referrer name="pc_cmd_st"/>
			<referrer name="SSCANF_OnPlayerConnect"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnDialogResponse"/>
			<referrer name="OnPlayerPickUpPickup"/>
			<referrer name="OnPlayerEnterDynamicCP"/>
			<referrer name="OnPlayerLeaveDynamicCP"/>
			<referrer name="DestroyPickupBomb"/>
			<referrer name="DefusePickupBomb"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="IsVehicleOccupied"/>
			<referrer name="OnPlayerWeaponShot"/>
			<referrer name="RemovePlayerDrunk"/>
		</member>
		<member name="C:true" value="1">
			<tagname value="bool"/>
			<referrer name="CA_CreateObject_DC"/>
			<referrer name="SSCANF_OnGameModeInit"/>
			<referrer name="SwitchPlayerTeam"/>
			<referrer name="SSCANF_OnPlayerConnect"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="ForcePerkSelection"/>
			<referrer name="OnPlayerPickUpPickup"/>
			<referrer name="OnPlayerEnterDynamicCP"/>
			<referrer name="IsVehicleOccupied"/>
		</member>

		<!-- variables -->
		<member name="F:CA_ObjectList">
			<referrer name="CA_CreateObject_DC"/>
			<referrer name="CA_DestroyObject_DC"/>
			<referrer name="CA_SetObjectPos_DC"/>
			<referrer name="CA_SetObjectRot_DC"/>
			<referrer name="CA_DestroyAllObjects_DC"/>
		</member>
		<member name="F:CELLMIN_ON_MATCHES">
			<library>sscanf</library>  <remarks>  The <c>CELLMIN_ON_MATCHES</c> option as a constant string so you can get  compile-time spell checking on the name.  Whatever the value of  <c>MATCH_NAME_PARTIAL</c>, the first found player will always be returned,  so if you do a search for <c>_</c> on an RP server, you could get almost  anyone.  To detect this case, if more than one player will match the  specified string then <em>sscanf</em> will return an ID of <c>cellmin</c>  instead.  This can be combined with <c>U</c> for a lot more power:  <code>  sscanf(params, "?&lt;CELLMIN_ON_MATCHES=1&gt;U(-1)", id);                <br />  if (id == -1)                                                            <br />  {                                                                        <br /><indent />  // No player was entered.                                            <br />  }                                                                        <br />  else if (id == cellmin)                                                  <br />  {                                                                        <br /><indent />  // Multiple matches found                                            <br />  }                                                                        <br />  else if (id == INVALID_PLAYER_ID)                                        <br />  {                                                                        <br /><indent />  // Entered player is not connected.                                  <br />  }                                                                        <br />  else                                                                     <br />  {                                                                        <br /><indent />  // Found just one player.                                            <br />  }  </code>  </remarks> 
		</member>
		<member name="F:CPInfo">
			<referrer name="SSCANF_OnGameModeInit"/>
			<referrer name="OnPlayerEnterDynamicCP"/>
			<referrer name="OnPlayerLeaveDynamicCP"/>
			<referrer name="DestroyPickupBomb"/>
			<referrer name="DefusePickupBomb"/>
		</member>
		<member name="F:ClassInfo">
			<referrer name="SSCANF_OnGameModeInit"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="OnPlayerSpawn"/>
		</member>
		<member name="F:MATCH_NAME_FIRST">
			<library>sscanf</library>  <remarks>  The <c>MATCH_NAME_FIRST</c> option as a constant string so you can get compile-  time spell checking on the name.  Specify whether <c>u</c> etc keep searching  for better matching player names after finding one:  <code>  SSCANF_Option(MATCH_NAME_FIRST, 0); // Enable scanning for the best name match not the first (default).  <br />  SSCANF_Option(MATCH_NAME_FIRST, 1); // Enable scanning for the first name match not the best (old behaviour).  </code>  </remarks> 
		</member>
		<member name="F:MATCH_NAME_PARTIAL">
			<library>sscanf</library>  <remarks>  The <c>MATCH_NAME_PARTIAL</c> option as a constant string so you can get  compile-time spell checking on the name.  Currently sscanf will search for  players by name, and will <em>always</em> search for player whose name  <em>starts</em> with the specified string.  If someone types <c>Y_Less</c>,  sscanf will not find say <c>[CLAN]Y_Less</c> because there name doesn't start  with the specified text.  This option, when set to <c>1</c>, will search  <em>anywhere</em> in the player's name for the given string.  </remarks> 
		</member>
		<member name="F:MATCH_NAME_SIMILARITY">
			<library>sscanf</library>  <remarks>  The <c>MATCH_NAME_SIMILARITY</c> option as a constant string so you can get  compile-time spell checking on the name.  Specify whether <c>u</c> etc should  use the ngrams-based similarity algorithm when searching for players matching  a given name.  I.e. enable or disable fuzzy name matching.  It will return  the best match found, but depending on the threshold that may still be very  different to what was typed.  <code>  SSCANF_Option(MATCH_NAME_SIMILARITY, 0.0); // Will find all names, regardless of input. <br />  SSCANF_Option(MATCH_NAME_SIMILARITY, 1.0); // Will find exact matches only. <br />  SSCANF_Option(MATCH_NAME_SIMILARITY, 0.5); // Will find names somewhat similar to the input. <br />  SSCANF_Option(MATCH_NAME_SIMILARITY, -1.0); // Disable fuzzy name matching.  </code>  </remarks> 
		</member>
		<member name="F:OLD_DEFAULT_CUSTOM">
			<library>sscanf</library>  <remarks>  The <c>OLD_DEFAULT_CUSTOM</c> option as a constant string so you can get  compile-time spell checking on the name.  This is the same as  <c>OLD_DEFAULT_KUSTOM</c>, but with an alternate spelling.  </remarks> 
		</member>
		<member name="F:OLD_DEFAULT_KUSTOM">
			<library>sscanf</library>  <remarks>  The <c>OLD_DEFAULT_KUSTOM</c> option as a constant string so you can get  compile-time spell checking on the name.  As with <c>U</c>, <c>K</c> used to  require a valid identifier as the default and would parse it using the  specified callback, so this would <em>not</em> work:  <code>  K&lt;vehicle&gt;(Veyron)  </code>  Because that is not a valid vehicle name in GTA.  The new version now just  takes a number and returns that regardless:  <code>  K&lt;vehicle&gt;(999)  </code>  This setting reverts to the old behaviour.  </remarks> 
		</member>
		<member name="F:OLD_DEFAULT_NAME">
			<library>sscanf</library>  <remarks>  The <c>OLD_DEFAULT_NAME</c> option as a constant string so you can get  compile-time spell checking on the name.  The behaviour of <c>U</c>, <c>Q</c>  and <c>R</c> have been changed to take any number as a default, instead of a  connected player.  Setting <c>OLD_DEFAULT_NAME</c> to <c>1</c> will revert to  the old version.  </remarks> 
		</member>
		<member name="F:PerkInfo">
			<referrer name="SSCANF_OnGameModeInit"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="ForcePerkSelection"/>
		</member>
		<member name="F:PickupInfo">
			<referrer name="SSCANF_OnGameModeInit"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerPickUpPickup"/>
			<referrer name="DestroyPickupBomb"/>
			<referrer name="DefusePickupBomb"/>
		</member>
		<member name="F:PlayerInfo">
			<referrer name="pc_cmd_rustler"/>
			<referrer name="SwitchPlayerTeam"/>
			<referrer name="DestroyPlayerVehicle"/>
			<referrer name="SSCANF_OnPlayerConnect"/>
			<referrer name="TIMERFIX_OnPlayerDisconnect"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnDialogResponse"/>
			<referrer name="OnPlayerPickUpPickup"/>
			<referrer name="OnPlayerEnterDynamicCP"/>
			<referrer name="DefusePickupBomb"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
			<referrer name="RemovePlayerDrunk"/>
		</member>
		<member name="F:PlayerLastDamagerInfo">
			<referrer name="SetPlayerLastDamager"/>
			<referrer name="GetPlayerLastDamager"/>
		</member>
		<member name="F:SAMP_INCLUDES_VERSION">
			<attribute name="public"/>
		</member>
		<member name="F:SSCANF_ALPHA">
			<library>sscanf</library>  <remarks>  The <c>SSCANF_ALPHA</c> option as a constant string so you can get compile-  time spell checking on the name.  Specify the default alpha value for colours  (<c>m</c>) which don't manually specify an alpha channel.  The alpha values  are specified as a <em>decimal</em> number, <em>not</em> a <em>hex</em>  number, so setting an alpha of <c>0x80</c> would be:  <code>  SSCANF_Option(SSCANF_ALPHA, 128);  </code>  </remarks> 
		</member>
		<member name="F:SSCANF_ARGB">
			<library>sscanf</library>  <remarks>  The <c>SSCANF_ARGB</c> option as a constant string so you can get compile-  time spell checking on the name.  Specify whether the returned colour is  <c>ARGB</c> or <c>RGBA</c>:  <code>  SSCANF_Option(SSCANF_ARGB, 1); // Set 3- and 6-digit colour outputs to `AARRGGBB`. <br />  SSCANF_Option(SSCANF_ARGB, 0); // Set 3- and 6-digit colour outputs to `RRGGBBAA` (default).  </code>  </remarks> 
		</member>
		<member name="F:SSCANF_COLOUR_FORMS">
			<library>sscanf</library>  <remarks>  The <c>SSCANF_COLOUR_FORMS</c> option as a constant string so you can get  compile-time spell checking on the name.  There are multiple valid colour  input formats, which you can enable or disable here.  The parameter is a  bit map (flags) for all the following values:  <ul>  <li><c>1</c> - <c>#RGB</c></li>  <li><c>2</c> - <c>#RRGGBB</c></li>  <li><c>4</c> - <c>0xRRGGBB</c></li>  <li><c>8</c> - <c>RRGGBB</c></li>  <li><c>16</c> - <c>{RRGGBB}</c></li>  <li><c>32</c> - <c>0xRRGGBBAA</c></li>  <li><c>64</c> - <c>RRGGBBAA</c></li>  </ul>  So to ONLY accept SA:MP `SendClientMessage` colours use:  <code>  SSCANF_Option(SSCANF_COLOUR_FORMS, 16);  </code>  To only accept 8-digit values use:  <code>  SSCANF_Option(SSCANF_COLOUR_FORMS, 96);  </code>  Default values (those specified between <c>()</c>s for <c>M</c>) ignore this  setting - they can always use any form.  </remarks> 
		</member>
		<member name="F:SSCANF_EXT_">
			<library>sscanf</library>  <remarks>  The fallback for the filename in <c>extract</c> on the old compiler, which  doesn't have the inbuilt <c>__file</c> macro.  This is the "feature" enabled  by <c>SSCANF_NO_NICE_FEATURES</c>.  Appends <c>"unknown file"</c> in the  plugin when line number <c>&lt; 0</c>.  </remarks> 
		</member>
		<member name="F:SSCANF_FOM_">
			<library>sscanf</library>  <remarks>  The fallback for the filename in <c>unformat</c> on the old compiler, which  doesn't have the inbuilt <c>__file</c> macro.  This is the "feature" enabled  by <c>SSCANF_NO_NICE_FEATURES</c>.  Appends <c>"unknown file"</c> in the  plugin when line number <c>&lt; 0</c>.  </remarks> 
		</member>
		<member name="F:SSCANF_NPC">
			<library>sscanf</library>  <remarks>  Was sscanf built for an NPC mode or a normal mode?  </remarks> 
		</member>
		<member name="F:SSCANF_QUIET">
			<library>sscanf</library>  <remarks>  The <c>SSCANF_QUIET</c> option as a constant string so you can get compile-  time spell checking on the name.  Don't print any errors to the console.  <em>Really</em> not recommended unless you <em>know</em> your code is stable  and in production.  </remarks> 
		</member>
		<member name="F:SSCANF_UNK_">
			<library>sscanf</library>  <remarks>  The fallback for the filename in <c>sscanf</c> on the old compiler, which  doesn't have the inbuilt <c>__file</c> macro.  This is the "feature" enabled  by <c>SSCANF_NO_NICE_FEATURES</c>.  Appends <c>"unknown file"</c> in the  plugin when line number <c>&lt; 0</c>.  </remarks> 
		</member>
		<member name="F:SSCANF_VERSION_BCD">
			<referrer name="SSCANF_Version"/>
			<library>sscanf</library>  <remarks>  The sscanf version in BCD.  Example:  <code>  2.10.3  <br />  => 02 10 03 <br />  => 0x021003  </code>  </remarks> 
		</member>
		<member name="F:SSCANF_VERSION_BUILD">
			<library>sscanf</library>  <remarks>  The sscanf build number.  </remarks> 
		</member>
		<member name="F:SSCANF_VERSION_MAJOR">
			<library>sscanf</library>  <remarks>  The sscanf major version number.  </remarks> 
		</member>
		<member name="F:SSCANF_VERSION_MINOR">
			<library>sscanf</library>  <remarks>  The sscanf minor version number.  </remarks> 
		</member>
		<member name="F:SSCANF_VERSION_STRING">
			<library>sscanf</library>  <remarks>  The sscanf version as a string.  E.g. <c>"2.8.1"</c>.  </remarks> 
		</member>
		<member name="F:SSCANF_gInit">
			<referrer name="SSCANF_RunInit"/>
			<referrer name="OnScriptInit"/>
			<referrer name="OnFilterScriptInit"/>
			<referrer name="PawnCmd_OnGameModeInit"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerDisconnect"/>
			<library>sscanf</library>  <remarks>  Has sscanf been initialised at least once already in this script?  Avoids the  need to define <c>FILTERSCRIPT</c> by including <c>OnFilterScriptInit</c>  and <c>OnGameModeInit</c> (plus <c>OnNPCModeInit</c>) and seeing which one  gets called first.  </remarks> 
		</member>
		<member name="F:SkillInfo">
			<referrer name="TIMERFIX_OnPlayerDisconnect"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerTakeDamage"/>
		</member>
		<member name="F:Skill_KingCharges">
			<referrer name="SSCANF_OnGameModeInit"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerTakeDamage"/>
		</member>
		<member name="F:Streamer_IncludeFileVersion">
			<attribute name="public"/>
		</member>
		<member name="F:__date">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
			<referrer name="pc_cmd_cjump"/>
		</member>
		<member name="F:__time">
		</member>
		<member name="F:_pawncmd_is_gamemode">
			<tagname value="bool"/>
			<attribute name="public"/>
		</member>
		<member name="F:_pawncmd_version">
			<attribute name="public"/>
		</member>

		<!-- functions -->
		<member name="M:operator!(Float:)" syntax="operator!(Float:)(oper)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<dependency name="cellmax"/>
			<param name="oper">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator%(_:,Float:)" syntax="operator%(_:,Float:)(oper1, oper2)">
			<stacksize value="1"/>
			<param name="oper1">
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator%(Float:,_:)" syntax="operator%(Float:,_:)(oper1, oper2)">
			<stacksize value="1"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
			</param>
		</member>
		<member name="M:operator%(Float:,Float:)" syntax="operator%(Float:,Float:)(oper1, oper2)">
			<stacksize value="1"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator!=(Float:,_:)" syntax="operator!=(Float:,_:)(oper1, oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<referrer name="OnPlayerWeaponShot"/>
			<dependency name="float"/>
			<dependency name="floatcmp"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
			</param>
		</member>
		<member name="M:operator!=(Float:,Float:)" syntax="operator!=(Float:,Float:)(oper1, oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<dependency name="floatcmp"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator-(_:,Float:)" syntax="operator-(_:,Float:)(oper1, oper2)">
			<tagname value="Float"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatsub"/>
			<param name="oper1">
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator-(Float:,_:)" syntax="operator-(Float:,_:)(oper1, oper2)">
			<tagname value="Float"/>
			<stacksize value="4"/>
			<referrer name="CA_RayCastExplode"/>
			<referrer name="pc_cmd_cjump"/>
			<dependency name="float"/>
			<dependency name="floatsub"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
			</param>
		</member>
		<member name="M:operator+(Float:,_:)" syntax="operator+(Float:,_:)(oper1, oper2)">
			<tagname value="Float"/>
			<stacksize value="4"/>
			<referrer name="pc_cmd_cjump"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="OnPlayerTakeDamage"/>
			<dependency name="float"/>
			<dependency name="floatadd"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
			</param>
		</member>
		<member name="M:operator/(_:,Float:)" syntax="operator/(_:,Float:)(oper1, oper2)">
			<tagname value="Float"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatdiv"/>
			<param name="oper1">
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator/(Float:,_:)" syntax="operator/(Float:,_:)(oper1, oper2)">
			<tagname value="Float"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatdiv"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
			</param>
		</member>
		<member name="M:operator*(Float:,_:)" syntax="operator*(Float:,_:)(oper1, oper2)">
			<tagname value="Float"/>
			<stacksize value="4"/>
			<referrer name="CA_IsPlayerNearWater"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="OnPlayerTakeDamage"/>
			<dependency name="float"/>
			<dependency name="floatmul"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
			</param>
		</member>
		<member name="M:operator++(Float:)" syntax="operator++(Float:)(oper)">
			<tagname value="Float"/>
			<stacksize value="1"/>
			<dependency name="operator+(Float:,Float:)"/>
			<param name="oper">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator-(Float:)" syntax="operator-(Float:)(oper)">
			<tagname value="Float"/>
			<stacksize value="1"/>
			<referrer name="CA_RayCastExplode"/>
			<referrer name="CA_IsPlayerFacingWater"/>
			<referrer name="CA_IsPlayerBlocked"/>
			<dependency name="cellmin"/>
			<param name="oper">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator--(Float:)" syntax="operator--(Float:)(oper)">
			<tagname value="Float"/>
			<stacksize value="1"/>
			<dependency name="operator-(Float:,Float:)"/>
			<param name="oper">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator-(Float:,Float:)" syntax="operator-(Float:,Float:)(oper1, oper2)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="operator--(Float:)"/>
			<referrer name="CA_IsPlayerOnSurface"/>
			<referrer name="CA_IsPlayerInWater"/>
			<referrer name="CA_IsPlayerNearWater"/>
			<referrer name="CA_IsPlayerFacingWater"/>
			<referrer name="CA_IsPlayerBlocked"/>
			<referrer name="CA_GetRoomHeight"/>
			<referrer name="CA_GetRoomCenter"/>
			<referrer name="CreateCustomExplosion"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator+(Float:,Float:)" syntax="operator+(Float:,Float:)(oper1, oper2)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="operator++(Float:)"/>
			<referrer name="CA_RayCastExplode"/>
			<referrer name="CA_IsPlayerInWater"/>
			<referrer name="CA_IsPlayerNearWater"/>
			<referrer name="CA_IsPlayerFacingWater"/>
			<referrer name="CA_IsPlayerBlocked"/>
			<referrer name="CA_GetRoomHeight"/>
			<referrer name="CA_GetRoomCenter"/>
			<referrer name="CreateCustomExplosion"/>
			<referrer name="pc_cmd_cjump"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator/(Float:,Float:)" syntax="operator/(Float:,Float:)(oper1, oper2)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="CA_RayCastExplode"/>
			<referrer name="CA_GetRoomCenter"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator*(Float:,Float:)" syntax="operator*(Float:,Float:)(oper1, oper2)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="CA_RayCastExplode"/>
			<referrer name="CA_IsPlayerNearWater"/>
			<referrer name="CA_IsPlayerFacingWater"/>
			<referrer name="CA_IsPlayerBlocked"/>
			<referrer name="CA_GetRoomHeight"/>
			<referrer name="CA_GetRoomCenter"/>
			<referrer name="pc_cmd_cjump"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:Float:operator=(_:)" syntax="Float:operator=(_:)(oper)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="CreateCustomExplosion"/>
			<referrer name="SSCANF_OnGameModeInit"/>
			<referrer name="SwitchPlayerTeam"/>
			<referrer name="pc_cmd_cjump"/>
			<referrer name="SSCANF_OnPlayerConnect"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="DestroyPickupBomb"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="DestroyKingCharge"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="oper">
			</param>
		</member>
		<member name="M:operator==(Float:,Float:)" syntax="operator==(Float:,Float:)(oper1, oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<dependency name="floatcmp"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator==(Float:,_:)" syntax="operator==(Float:,_:)(oper1, oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatcmp"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
			</param>
		</member>
		<member name="M:operator&gt;(Float:,Float:)" syntax="operator&gt;(Float:,Float:)(oper1, oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<referrer name="CA_RayCastExplode"/>
			<referrer name="CA_IsPlayerInWater"/>
			<dependency name="floatcmp"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator&gt;(Float:,_:)" syntax="operator&gt;(Float:,_:)(oper1, oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatcmp"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
			</param>
		</member>
		<member name="M:operator&gt;(_:,Float:)" syntax="operator&gt;(_:,Float:)(oper1, oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatcmp"/>
			<param name="oper1">
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator&gt;=(Float:,Float:)" syntax="operator&gt;=(Float:,Float:)(oper1, oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<referrer name="SSCANF_GetSimilarString"/>
			<dependency name="floatcmp"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator&gt;=(Float:,_:)" syntax="operator&gt;=(Float:,_:)(oper1, oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatcmp"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
			</param>
		</member>
		<member name="M:operator&gt;=(_:,Float:)" syntax="operator&gt;=(_:,Float:)(oper1, oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatcmp"/>
			<param name="oper1">
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator&lt;(Float:,Float:)" syntax="operator&lt;(Float:,Float:)(oper1, oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<referrer name="CA_RayCastExplode"/>
			<referrer name="CA_IsPlayerInWater"/>
			<referrer name="CreateCustomExplosion"/>
			<dependency name="floatcmp"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator&lt;(Float:,_:)" syntax="operator&lt;(Float:,_:)(oper1, oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatcmp"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
			</param>
		</member>
		<member name="M:operator&lt;(_:,Float:)" syntax="operator&lt;(_:,Float:)(oper1, oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatcmp"/>
			<param name="oper1">
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator&lt;=(Float:,Float:)" syntax="operator&lt;=(Float:,Float:)(oper1, oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<referrer name="CA_GetRoomCenter"/>
			<dependency name="floatcmp"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator&lt;=(Float:,_:)" syntax="operator&lt;=(Float:,_:)(oper1, oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatcmp"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
			</param>
		</member>
		<member name="M:operator&lt;=(_:,Float:)" syntax="operator&lt;=(_:,Float:)(oper1, oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatcmp"/>
			<param name="oper1">
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:@CO_SSCANF" syntax="@CO_SSCANF()">
			<attribute name="public"/>
			<stacksize value="1"/>
		</member>
		<member name="M:@receivepacket" syntax="@receivepacket(packet[], size, source[])">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="packet">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="size">
			</param>
			<param name="source">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:@receivestring" syntax="@receivestring(message[], source[])">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="message">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="source">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:AddPlayerClassEx" syntax="AddPlayerClassEx(teamid, modelid, spawn_x, spawn_y, spawn_z, z_angle, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo)">
			<attribute name="native"/>
			<referrer name="SSCANF_OnGameModeInit"/>
			<param name="teamid">
				The team you want the player to spawn in
			</param>
			<param name="modelid">
				The <a href="http://wiki.sa-mp.com/wiki/Skins">skin</a> which the player will spawn with
			</param>
			<param name="spawn_x">
				<paraminfo>Float </paraminfo>
				The X coordinate of the class' spawn position
			</param>
			<param name="spawn_y">
				<paraminfo>Float </paraminfo>
				The Y coordinate of the class' spawn position
			</param>
			<param name="spawn_z">
				<paraminfo>Float </paraminfo>
				The Z coordinate of the class' spawn position
			</param>
			<param name="z_angle">
				<paraminfo>Float </paraminfo>
				The direction in which the player will face after spawning
			</param>
			<param name="weapon1">
				The first spawn-<a href="http://wiki.sa-mp.com/wiki/Weapons">weapon</a> for the player
			</param>
			<param name="weapon1_ammo">
				The amount of ammunition for the first spawn weapon
			</param>
			<param name="weapon2">
				The second spawn-<a href="http://wiki.sa-mp.com/wiki/Weapons">weapon</a> for the player
			</param>
			<param name="weapon2_ammo">
				The amount of ammunition for the second spawn weapon
			</param>
			<param name="weapon3">
				The third spawn-<a href="http://wiki.sa-mp.com/wiki/Weapons">weapon</a> for the player
			</param>
			<param name="weapon3_ammo">
				The amount of ammunition for the third spawn weapon
			</param>
			<summary>This function is exactly the same as the <a href="#AddPlayerClass">AddPlayerClass</a> function, with the addition of a team parameter.</summary>             <returns> <ul> <li>The <b>ID of the class</b> which was just added.</li> <li><b><c>319</c></b> if the class limit (<b><c>320</c></b>) was reached. The highest possible class ID is <b><c>319</c></b>.</li> </ul> </returns> <remarks>The maximum class ID is <b><c>319</c></b> (starting from <b><c>0</c></b>, so a total of <b><c>320</c></b> classes). When this limit is reached, any more classes that are added will replace ID <b><c>319</c></b>.</remarks> <seealso name="AddPlayerClass"/> <seealso name="SetSpawnInfo"/> <seealso name="SetPlayerTeam"/> <seealso name="SetPlayerSkin"/>
		</member>
		<member name="M:ApplyAnimation" syntax="ApplyAnimation(playerid, animlib[], animname[], fDelta, loop, lockx, locky, freeze, time, forcesync)">
			<attribute name="native"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="OnPlayerEnterDynamicCP"/>
			<param name="playerid">
				The ID of the player to apply the animation to
			</param>
			<param name="animlib">
				<paraminfo> [] </paraminfo>
				The animation library from which to apply an animation
			</param>
			<param name="animname">
				<paraminfo> [] </paraminfo>
				The name of the animation to apply, within the specified library
			</param>
			<param name="fDelta">
				<paraminfo>Float </paraminfo>
				The speed to play the animation (use 4.1)
			</param>
			<param name="loop">
				If set to <b><c>1</c></b>, the animation will loop. If set to <b><c>0</c></b>, the animation will play once
			</param>
			<param name="lockx">
				If set to <b><c>0</c></b>, the player is returned to their old X coordinate once the animation is complete (for animations that move the player such as walking). <b><c>1</c></b> will not return them to their old position
			</param>
			<param name="locky">
				Same as above but for the Y axis. Should be kept the same as the previous parameter
			</param>
			<param name="freeze">
				Setting this to <b><c>1</c></b> will freeze the player at the end of the animation. <b><c>0</c></b> will not
			</param>
			<param name="time">
				Timer in milliseconds. For a never-ending loop it should be <b><c>0</c></b>
			</param>
			<param name="forcesync">
				Set to <b><c>1</c></b> to make server sync the animation with all other players in streaming radius. <b><c>2</c></b> works same as <b><c>1</c></b>, but will ONLY apply the animation to streamed-in players, but NOT the actual player being animated (useful for npc animations and persistent animations when players are being streamed) (optional=<b><c>0</c></b>)
			</param>
			<summary>Apply an animation to a player.</summary>           <seealso name="ClearAnimations"/> <seealso name="SetPlayerSpecialAction"/> <remarks>The <paramref name="forcesync"/> optional parameter, which defaults to <b><c>0</c></b>, in most cases is not needed since players sync animations themselves. The <paramref name="forcesync"/> parameter can force all players who can see <paramref name="playerid"/> to play the animation regardless of whether the player is performing that animation. This is useful in circumstances where the player can't sync the animation themselves. For example, they may be paused.</remarks> <remarks>An invalid animation library will crash the player's game.</remarks> <returns>This function always returns <b><c>1</c></b>, even if the player specified does not exist, or any of the parameters are invalid (e.g. invalid library).</returns>
		</member>
		<member name="M:AttachDynamicObjectToPlayer" syntax="AttachDynamicObjectToPlayer(objectid, playerid, offsetx, offsety, offsetz, rx, ry, rz)">
			<attribute name="native"/>
			<referrer name="OnPlayerSpawn"/>
			<param name="objectid">
			</param>
			<param name="playerid">
			</param>
			<param name="offsetx">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="offsety">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="offsetz">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="rx">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="ry">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="rz">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:BCD" syntax="BCD(number)">
			<stacksize value="1"/>
			<param name="number">
			</param>
			<library>sscanf</library>  <remarks>  Converts a version string to  <a href="https://en.wikipedia.org/wiki/Binary-coded_decimal">BCD</a>.  For example:  <code>  BCD(5.6.17);  </code>  Returns:  <code>  0x050617  </code>  Each section (between dots) is assigned a single byte and the last section is  always in the lowest byte.  This implies a maximum of four sections and two  digits per section.  </remarks> 
		</member>
		<member name="M:CA_CreateObject" syntax="CA_CreateObject(modelid, x, y, z, rx, ry, rz, add)">
			<attribute name="native"/>
			<referrer name="CA_CreateObject_DC"/>
			<referrer name="SSCANF_OnGameModeInit"/>
			<param name="modelid">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="rx">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="ry">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="rz">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="add">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:CA_CreateObject_DC" syntax="CA_CreateObject_DC(modelid, x, y, z, rx, ry, rz, drawdistance)">
			<stacksize value="12"/>
			<dependency name="CA_CreateObject"/>
			<dependency name="CA_ObjectList"/>
			<dependency name="CA_ObjectList"/>
			<dependency name="ColdAndreadsID"/>
			<dependency name="CreateObject"/>
			<dependency name="ObjectID"/>
			<dependency name="ObjectType"/>
			<dependency name="ObjectUsed"/>
			<dependency name="false"/>
			<dependency name="true"/>
			<param name="modelid">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="rx">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="ry">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="rz">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="drawdistance">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:CA_DestroyAllObjects_DC" syntax="CA_DestroyAllObjects_DC()">
			<stacksize value="5"/>
			<referrer name="OnFilterScriptExit"/>
			<referrer name="OnGameModeExit"/>
			<dependency name="CA_DestroyObject_DC"/>
			<dependency name="CA_ObjectList"/>
			<dependency name="ObjectType"/>
			<dependency name="ObjectUsed"/>
		</member>
		<member name="M:CA_DestroyObject" syntax="CA_DestroyObject(index)">
			<attribute name="native"/>
			<referrer name="CA_DestroyObject_DC"/>
			<param name="index">
			</param>
		</member>
		<member name="M:CA_DestroyObject_DC" syntax="CA_DestroyObject_DC(index)">
			<stacksize value="3"/>
			<referrer name="CA_DestroyAllObjects_DC"/>
			<dependency name="CA_DestroyObject"/>
			<dependency name="CA_ObjectList"/>
			<dependency name="CA_ObjectList"/>
			<dependency name="ColdAndreadsID"/>
			<dependency name="DestroyObject"/>
			<dependency name="ObjectID"/>
			<dependency name="ObjectType"/>
			<dependency name="ObjectUsed"/>
			<dependency name="false"/>
			<param name="index">
			</param>
		</member>
		<member name="M:CA_FindZ_For2DCoord" syntax="CA_FindZ_For2DCoord(x, y, &amp;z)">
			<stacksize value="11"/>
			<dependency name="CA_RayCastLine"/>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float &amp; </paraminfo>
			</param>
		</member>
		<member name="M:CA_GetRoomCenter" syntax="CA_GetRoomCenter(x, y, z, &amp;m_x, &amp;m_y)">
			<tagname value="Float"/>
			<stacksize value="18"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator/(Float:,Float:)"/>
			<dependency name="operator*(Float:,Float:)"/>
			<dependency name="operator&lt;=(Float:,Float:)"/>
			<dependency name="CA_RayCastLine"/>
			<dependency name="VectorSize"/>
			<dependency name="degrees"/>
			<dependency name="floatabs"/>
			<dependency name="floatcos"/>
			<dependency name="floatsin"/>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="m_x">
				<paraminfo>Float &amp; </paraminfo>
			</param>
			<param name="m_y">
				<paraminfo>Float &amp; </paraminfo>
			</param>
		</member>
		<member name="M:CA_GetRoomHeight" syntax="CA_GetRoomHeight(x, y, z)">
			<tagname value="Float"/>
			<stacksize value="17"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator*(Float:,Float:)"/>
			<dependency name="CA_RayCastLine"/>
			<dependency name="floatsqroot"/>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:CA_Init" syntax="CA_Init()">
			<attribute name="native"/>
			<referrer name="SSCANF_OnGameModeInit"/>
		</member>
		<member name="M:CA_IsPlayerBlocked" syntax="CA_IsPlayerBlocked(playerid, dist, height)">
			<stacksize value="17"/>
			<dependency name="operator-(Float:)"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator*(Float:,Float:)"/>
			<dependency name="CA_RayCastLine"/>
			<dependency name="GetPlayerFacingAngle"/>
			<dependency name="GetPlayerPos"/>
			<dependency name="degrees"/>
			<dependency name="floatcos"/>
			<dependency name="floatsin"/>
			<param name="playerid">
			</param>
			<param name="dist">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="height">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:CA_IsPlayerFacingWater" syntax="CA_IsPlayerFacingWater(playerid, dist, height)">
			<stacksize value="16"/>
			<dependency name="operator-(Float:)"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator*(Float:,Float:)"/>
			<dependency name="CA_RayCastLine"/>
			<dependency name="GetPlayerFacingAngle"/>
			<dependency name="GetPlayerPos"/>
			<dependency name="degrees"/>
			<dependency name="floatcos"/>
			<dependency name="floatsin"/>
			<param name="playerid">
			</param>
			<param name="dist">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="height">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:CA_IsPlayerInWater" syntax="CA_IsPlayerInWater(playerid, &amp;depth, &amp;playerdepth)">
			<stacksize value="68"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator&gt;(Float:,Float:)"/>
			<dependency name="operator&lt;(Float:,Float:)"/>
			<dependency name="CA_RayCastMultiLine"/>
			<dependency name="GetPlayerPos"/>
			<param name="playerid">
			</param>
			<param name="depth">
				<paraminfo>Float &amp; </paraminfo>
			</param>
			<param name="playerdepth">
				<paraminfo>Float &amp; </paraminfo>
			</param>
		</member>
		<member name="M:CA_IsPlayerNearWater" syntax="CA_IsPlayerNearWater(playerid, dist, height)">
			<stacksize value="16"/>
			<dependency name="operator*(Float:,_:)"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator*(Float:,Float:)"/>
			<dependency name="CA_RayCastLine"/>
			<dependency name="GetPlayerPos"/>
			<dependency name="degrees"/>
			<dependency name="floatcos"/>
			<dependency name="floatsin"/>
			<param name="playerid">
			</param>
			<param name="dist">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="height">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:CA_IsPlayerOnSurface" syntax="CA_IsPlayerOnSurface(playerid, tolerance)">
			<stacksize value="14"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="CA_RayCastLine"/>
			<dependency name="GetPlayerPos"/>
			<param name="playerid">
			</param>
			<param name="tolerance">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:CA_OnFilterScriptExit" syntax="CA_OnFilterScriptExit()">
			<attribute name="public"/>
			<stacksize value="1"/>
		</member>
		<member name="M:CA_OnGameModeExit" syntax="CA_OnGameModeExit()">
			<attribute name="public"/>
			<stacksize value="1"/>
		</member>
		<member name="M:CA_RayCastExplode" syntax="CA_RayCastExplode(cX, cY, cZ, Radius, intensity, collisions[][])">
			<stacksize value="19"/>
			<dependency name="operator-(Float:,_:)"/>
			<dependency name="operator-(Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator/(Float:,Float:)"/>
			<dependency name="operator*(Float:,Float:)"/>
			<dependency name="operator&gt;(Float:,Float:)"/>
			<dependency name="operator&lt;(Float:,Float:)"/>
			<dependency name="CA_RayCastLine"/>
			<dependency name="floatcos"/>
			<dependency name="floatround"/>
			<dependency name="floatround_floor"/>
			<dependency name="floatsin"/>
			<param name="cX">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="cY">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="cZ">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="Radius">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="intensity">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="collisions">
				<paraminfo>Float [][3] </paraminfo>
			</param>
		</member>
		<member name="M:CA_RayCastLine" syntax="CA_RayCastLine(StartX, StartY, StartZ, EndX, EndY, EndZ, &amp;x, &amp;y, &amp;z)">
			<attribute name="native"/>
			<referrer name="CA_FindZ_For2DCoord"/>
			<referrer name="CA_RayCastExplode"/>
			<referrer name="CA_IsPlayerOnSurface"/>
			<referrer name="CA_IsPlayerNearWater"/>
			<referrer name="CA_IsPlayerFacingWater"/>
			<referrer name="CA_IsPlayerBlocked"/>
			<referrer name="CA_GetRoomHeight"/>
			<referrer name="CA_GetRoomCenter"/>
			<param name="StartX">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="StartY">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="StartZ">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="EndX">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="EndY">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="EndZ">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="x">
				<paraminfo>Float &amp; </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float &amp; </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float &amp; </paraminfo>
			</param>
		</member>
		<member name="M:CA_RayCastMultiLine" syntax="CA_RayCastMultiLine(StartX, StartY, StartZ, EndX, EndY, EndZ, retx[], rety[], retz[], retdist[], ModelIDs[], size)">
			<attribute name="native"/>
			<referrer name="CA_IsPlayerInWater"/>
			<param name="StartX">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="StartY">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="StartZ">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="EndX">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="EndY">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="EndZ">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="retx">
				<paraminfo>Float [] </paraminfo>
			</param>
			<param name="rety">
				<paraminfo>Float [] </paraminfo>
			</param>
			<param name="retz">
				<paraminfo>Float [] </paraminfo>
			</param>
			<param name="retdist">
				<paraminfo>Float [] </paraminfo>
			</param>
			<param name="ModelIDs">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="size">
			</param>
		</member>
		<member name="M:CA_RemoveBarriers" syntax="CA_RemoveBarriers()">
			<stacksize value="8"/>
			<dependency name="CA_RemoveBuilding"/>
		</member>
		<member name="M:CA_RemoveBreakableBuildings" syntax="CA_RemoveBreakableBuildings()">
			<stacksize value="8"/>
			<dependency name="CA_RemoveBuilding"/>
		</member>
		<member name="M:CA_RemoveBuilding" syntax="CA_RemoveBuilding(modelid, x, y, z, radius)">
			<attribute name="native"/>
			<referrer name="CA_RemoveBarriers"/>
			<referrer name="CA_RemoveBreakableBuildings"/>
			<param name="modelid">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="radius">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:CA_SetObjectPos" syntax="CA_SetObjectPos(index, x, y, z)">
			<attribute name="native"/>
			<referrer name="CA_SetObjectPos_DC"/>
			<param name="index">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:CA_SetObjectPos_DC" syntax="CA_SetObjectPos_DC(index, x, y, z)">
			<stacksize value="6"/>
			<dependency name="CA_ObjectList"/>
			<dependency name="CA_ObjectList"/>
			<dependency name="CA_SetObjectPos"/>
			<dependency name="ColdAndreadsID"/>
			<dependency name="ObjectID"/>
			<dependency name="ObjectType"/>
			<dependency name="ObjectUsed"/>
			<dependency name="SetObjectPos"/>
			<param name="index">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:CA_SetObjectRot" syntax="CA_SetObjectRot(index, rx, ry, rz)">
			<attribute name="native"/>
			<referrer name="CA_SetObjectRot_DC"/>
			<param name="index">
			</param>
			<param name="rx">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="ry">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="rz">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:CA_SetObjectRot_DC" syntax="CA_SetObjectRot_DC(index, rx, ry, rz)">
			<stacksize value="6"/>
			<dependency name="CA_ObjectList"/>
			<dependency name="CA_ObjectList"/>
			<dependency name="CA_SetObjectRot"/>
			<dependency name="ColdAndreadsID"/>
			<dependency name="ObjectID"/>
			<dependency name="ObjectType"/>
			<dependency name="ObjectUsed"/>
			<dependency name="SetObjectRot"/>
			<param name="index">
			</param>
			<param name="rx">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="ry">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="rz">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:CallLocalFunction" syntax="CallLocalFunction(function[], format[], ...)">
			<attribute name="native"/>
			<referrer name="OnFilterScriptExit"/>
			<referrer name="OnGameModeExit"/>
			<param name="function">
				<paraminfo> [] </paraminfo>
				Public function's name
			</param>
			<param name="format">
				<paraminfo> [] </paraminfo>
				Tag/format of each variable
			</param>
			<param name="...">
				<paraminfo> {Float,_} </paraminfo>
				'Indefinite' number of arguments of any tag
			</param>
			<summary>Calls a public function from the script in which it is used.</summary>    <seealso name="CallRemoteFunction"/> <returns>The value that the <b>only</b> public function returned.</returns> <remarks>CallLocalFunction crashes the server if it's passing an empty string.</remarks> <remarks> Format string placeholders:<p/> <ul> <li><b><c>c</c></b> - a single character</li> <li><b><c>d</c></b> - an integer (whole) number</li> <li><b><c>i</c></b> - an integer (whole) number</li> <li><b><c>x</c></b> - a number in hexadecimal notation</li> <li><b><c>f</c></b> - a floating point number</li> <li><b><c>s</c></b> - a string</li> </ul> </remarks>
		</member>
		<member name="M:CreateCustomExplosion" syntax="CreateCustomExplosion(playerid, fX, fY, fZ, type, radius)">
			<stacksize value="11"/>
			<referrer name="DestroyKingCharge"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="Float:operator=(_:)"/>
			<dependency name="operator&lt;(Float:,Float:)"/>
			<dependency name="CreateExplosion"/>
			<dependency name="GetPlayerPos"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="SetPlayerLastDamager"/>
			<dependency name="floatpower"/>
			<dependency name="floatsqroot"/>
			<param name="playerid">
			</param>
			<param name="fX">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="fY">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="fZ">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="type">
			</param>
			<param name="radius">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:CreateDynamicCP" syntax="CreateDynamicCP(x, y, z, size, worldid, interiorid, playerid, streamdistance, areaid, priority)">
			<attribute name="native"/>
			<referrer name="SSCANF_OnGameModeInit"/>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="size">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="worldid">
			</param>
			<param name="interiorid">
			</param>
			<param name="playerid">
			</param>
			<param name="streamdistance">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="areaid">
			</param>
			<param name="priority">
			</param>
		</member>
		<member name="M:CreateDynamicMapIcon" syntax="CreateDynamicMapIcon(x, y, z, type, color, worldid, interiorid, playerid, streamdistance, style, areaid, priority)">
			<attribute name="native"/>
			<referrer name="SSCANF_OnGameModeInit"/>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="type">
			</param>
			<param name="color">
			</param>
			<param name="worldid">
			</param>
			<param name="interiorid">
			</param>
			<param name="playerid">
			</param>
			<param name="streamdistance">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="style">
			</param>
			<param name="areaid">
			</param>
			<param name="priority">
			</param>
		</member>
		<member name="M:CreateDynamicObject" syntax="CreateDynamicObject(modelid, x, y, z, rx, ry, rz, worldid, interiorid, playerid, streamdistance, drawdistance, areaid, priority)">
			<attribute name="native"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerTakeDamage"/>
			<param name="modelid">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="rx">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="ry">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="rz">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="worldid">
			</param>
			<param name="interiorid">
			</param>
			<param name="playerid">
			</param>
			<param name="streamdistance">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="drawdistance">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="areaid">
			</param>
			<param name="priority">
			</param>
		</member>
		<member name="M:CreateExplosion" syntax="CreateExplosion(X, Y, Z, type, Radius)">
			<attribute name="native"/>
			<referrer name="CreateCustomExplosion"/>
			<referrer name="DestroyPickupBomb"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="X">
				<paraminfo>Float </paraminfo>
				The X coordinate of the explosion
			</param>
			<param name="Y">
				<paraminfo>Float </paraminfo>
				The Y coordinate of the explosion
			</param>
			<param name="Z">
				<paraminfo>Float </paraminfo>
				The Z coordinate of the explosion
			</param>
			<param name="type">
				The type of explosion
			</param>
			<param name="Radius">
				<paraminfo>Float </paraminfo>
				The explosion radius
			</param>
			<summary>Create an explosion at the specified coordinates.</summary>      <seealso name="CreateExplosionForPlayer"/> <remarks>There is a limit as to how many explosions can be seen at once by a player. This is roughly 10.</remarks> <returns>This function always returns <b><c>1</c></b>, even when the explosion type and/or radius values are invalid.</returns>
		</member>
		<member name="M:CreateObject" syntax="CreateObject(modelid, X, Y, Z, rX, rY, rZ, DrawDistance)">
			<attribute name="native"/>
			<referrer name="CA_CreateObject_DC"/>
			<referrer name="SSCANF_OnGameModeInit"/>
			<param name="modelid">
				The model to create
			</param>
			<param name="X">
				<paraminfo>Float </paraminfo>
				The X coordinate to create the object at
			</param>
			<param name="Y">
				<paraminfo>Float </paraminfo>
				The Y coordinate to create the object at
			</param>
			<param name="Z">
				<paraminfo>Float </paraminfo>
				The Z coordinate to create the object at
			</param>
			<param name="rX">
				<paraminfo>Float </paraminfo>
				The X rotation of the object
			</param>
			<param name="rY">
				<paraminfo>Float </paraminfo>
				The Y rotation of the object
			</param>
			<param name="rZ">
				<paraminfo>Float </paraminfo>
				The Z rotation of the object
			</param>
			<param name="DrawDistance">
				<paraminfo>Float </paraminfo>
				The distance that San Andreas renders objects at. <b><c>0.0</c></b> will cause objects to render at their default distances. <b>Usable since 0.3b, limited to <c>300</c> prior to 0.3x</b> (optional=<b><c>0.0</c></b>)
			</param>
			<summary>Creates an object at specified coordinates in the game world.</summary>         <seealso name="DestroyObject"/> <seealso name="IsValidObject"/> <seealso name="CreatePlayerObject"/> <seealso name="MoveObject"/> <seealso name="SetObjectPos"/> <seealso name="SetObjectRot"/> <seealso name="GetObjectPos"/> <seealso name="GetObjectRot"/> <seealso name="AttachObjectToPlayer"/> <seealso name="SetObjectMaterialText"/> <seealso name="SetObjectMaterial"/> <remarks> Objects that emit light (lampposts, police lights, bollard lights, neons etc.) that have a greater rotation than <b><c>16.26</c></b> degrees (or <b><c>-16.26</c></b>) on either the X or Y axis will stop shining. This effect also applies to light objects attached to other objects, players and vehicles. If a light object is attached to a car and the car is rotated over <b><c>16.26</c></b> degrees (like in a rollover), the object will also stop emitting light. This is a GTA:SA issue and is not caused by a bug in SA-MP. </remarks> <remarks>In case the light is attached to another object, one fix for this is to set <b>SyncRotation</b> to false in <a href="#AttachObjectToObject">AttachObjectToObject</a>. This will ensure the light stays at <b><c>0</c></b> rotation. This would only really work for objects that consist ONLY of light, so wouldn't work for the police light for example. </remarks> <remarks>There is a limit of <a href="http://wiki.sa-mp.com/wiki/Limits"><b><c>1000</c></b> objects (<b><c>MAX_OBJECTS</c></b>)</a>. To circumvent this limit, you can use a <a href="http://forum.sa-mp.com/showthread.php?t=102865">streamer</a></remarks> <returns>The ID of the object that was created, or <b><c>INVALID_OBJECT_ID</c></b> if the object limit (<b><c>MAX_OBJECTS</c></b>) was reached.</returns>
		</member>
		<member name="M:CreatePickup" syntax="CreatePickup(model, type, X, Y, Z, virtualworld)">
			<attribute name="native"/>
			<referrer name="SSCANF_OnGameModeInit"/>
			<param name="model">
				The <a href="http://wiki.sa-mp.com/wiki/Pickup_IDs">model</a> of the pickup
			</param>
			<param name="type">
				The pickup spawn type (see table under remarks)
			</param>
			<param name="X">
				<paraminfo>Float </paraminfo>
				The X coordinate to create the pickup at
			</param>
			<param name="Y">
				<paraminfo>Float </paraminfo>
				The Y coordinate to create the pickup at
			</param>
			<param name="Z">
				<paraminfo>Float </paraminfo>
				The Z coordinate to create the pickup at
			</param>
			<param name="virtualworld">
				The virtual world ID of the pickup. Use <b><c>-1</c></b> to make the pickup show in all worlds (optional=<b><c>0</c></b>)
			</param>
			<summary>This function does exactly the same as AddStaticPickup, except it returns a pickup ID which can be used to destroy it afterwards and be tracked using <a href="#OnPlayerPickUpPickup">OnPlayerPickUpPickup</a>.</summary>       <seealso name="AddStaticPickup"/> <seealso name="DestroyPickup"/> <seealso name="OnPlayerPickUpPickup"/> <remarks> <b>Known Bugs:</b><p/> Pickups that have a X or Y lower than <b><c>-4096.0</c></b> or bigger than <b><c>4096.0</c></b> won't show up and won't trigger <a href="#OnPlayerPickUpPickup">OnPlayerPickUpPickup</a> either. </remarks> <remarks> The only type of pickup that can be picked up from inside a vehicle is <b><c>14</c></b> (except for special pickups such as bribes).<p/> Pickups are shown to, and can be picked up by all players.<p/> It is possible that if <a href="#DestroyPickup">DestroyPickup</a> is used when a pickup is picked up, more than one player can pick up the pickup, due to lag. This can be circumvented through the use of variables.<p/> Certain pickup types come with 'automatic responses', for example using an M4 model in the pickup will automatically give the player the weapon and some ammo. For fully scripted pickups, type <b><c>1</c></b> should be used. <p/> </remarks> <remarks> <b>Available Pickup Types</b><p/> Most other IDs are either undocumented or are similar to type <b><c>1</c></b> (but do not use them just because they seem similar to ID <b><c>1</c></b>, they might have side-effects like ID <b><c>18</c></b> and <b><c>20</c></b>). <ul> <li><b><c>0</c></b> - The pickup does not always display. If displayed, it can't be picked up and does not trigger <a href="#OnPlayerPickUpPickup">OnPlayerPickUpPickup</a> and it will stay after server shutdown.</li> <li><b><c>1</c></b> - Exists always. Disables pickup scripts such as horseshoes and oysters to allow for scripted actions ONLY. Will trigger <a href="#OnPlayerPickUpPickup">OnPlayerPickUpPickup</a> every few seconds.</li> <li><b><c>2</c></b> - Disappears after pickup, respawns after 30 seconds if the player is at a distance of at least 15 meters.</li> <li><b><c>3</c></b> - Disappears after pickup, respawns after death.</li> <li><b><c>4</c></b> - Disappears after 15 to 20 seconds. Respawns after death.</li> <li><b><c>8</c></b> - Disappears after pickup, but has no effect.</li> <li><b><c>11</c></b> - Blows up a few seconds after being created (bombs?)</li> <li><b><c>12</c></b> - Blows up a few seconds after being created.</li> <li><b><c>13</c></b> - Invisible. Triggers checkpoint sound when picked up with a vehicle, but doesn't trigger <a href="#OnPlayerPickUpPickup">OnPlayerPickUpPickup</a>.</li> <li><b><c>14</c></b> - Disappears after pickup, can only be picked up with a vehicle. Triggers checkpoint sound.</li> <li><b><c>15</c></b> - Same as type <b><c>2</c></b>.</li> <li><b><c>18</c></b> - Similar to type <b><c>1</c></b>. Pressing Tab (<b><c>KEY_ACTION</c></b>) makes it disappear but the key press doesn't trigger <a href="#OnPlayerPickUpPickup">OnPlayerPickUpPickup</a>.</li> <li><b><c>19</c></b> - Disappears after pickup, but doesn't respawn. Makes "cash pickup" sound if picked up.</li> <li><b><c>20</c></b> - Similar to type <b><c>1</c></b>. Disappears when you take a picture of it with the Camera weapon, which triggers "Snapshot # out of 0" message. Taking a picture doesn't trigger <a href="#OnPlayerPickUpPickup">OnPlayerPickUpPickup</a>.</li> <li><b><c>22</c></b> - Same as type <b><c>3</c></b>.</li> </ul> </remarks> <returns>The ID of the created pickup, <b><c>-1</c></b> on failure (<a href="http://wiki.sa-mp.com/wiki/Limits">pickup max limit</a>).</returns>
		</member>
		<member name="M:CreatePlayerTextDraw" syntax="CreatePlayerTextDraw(playerid, x, y, text[])">
			<tagname value="PlayerText"/>
			<attribute name="native"/>
			<referrer name="SSCANF_OnPlayerConnect"/>
			<referrer name="OnPlayerRequestClass"/>
			<param name="playerid">
				The ID of the player to create the textdraw for
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
				X-Coordinate
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
				Y-Coordinate
			</param>
			<param name="text">
				<paraminfo> [] </paraminfo>
				The text in the textdraw
			</param>
			<summary>Creates a textdraw for a single player. This can be used as a way around the <a href="#TextDrawCreate">global</a> text-draw limit.</summary>     <seealso name="PlayerTextDrawDestroy"/> <seealso name="PlayerTextDrawColor"/> <seealso name="PlayerTextDrawBoxColor"/> <seealso name="PlayerTextDrawBackgroundColor"/> <seealso name="PlayerTextDrawAlignment"/> <seealso name="PlayerTextDrawFont"/> <seealso name="PlayerTextDrawLetterSize"/> <seealso name="PlayerTextDrawTextSize"/> <seealso name="PlayerTextDrawSetOutline"/> <seealso name="PlayerTextDrawSetShadow"/> <seealso name="PlayerTextDrawSetProportional"/> <seealso name="PlayerTextDrawUseBox"/> <seealso name="PlayerTextDrawSetString"/> <seealso name="PlayerTextDrawShow"/> <seealso name="PlayerTextDrawHide"/> <remarks>This feature (player-textdraws) was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks> <remarks> If you choose values for y that are less than 1, the first text row will be invisible and only the shadow is visible.<p/> <paramref name="text"/> must <b>NOT</b> be empty or the server will crash! If you need a textdraw that shows nothing, use " " (a space) or _ (underscore)<p/> If the last character in the text is a space (" "), the text will all be blank.<p/> If part of the text is off-screen, the color of the text will not show, only the shadow (if enabled) will. <p/> </remarks> <remarks> This applies ONLY to sa-mp versions before <b>0.3z</b>:<p/><p/> Maximum length of textdraw is <b><c>800</c></b> characters. Longer text will crash the client in older versions.<p/> If you use color codes (such as <b><c>~R~ ~G~</c></b>) beyond 255th character the client will crash trying to display the textdraw. <p/> </remarks> <remarks>Keyboard key mapping codes (such as <b><c>~k~~VEHICLE_ENTER_EXIT~</c></b> Doesn't work beyond 255th character. </remarks> <remarks> The x,y coordinate is the top left coordinate for the text draw area based on a <b><c>640x480</c></b> "canvas" (irrespective of screen resolution). If you plan on using <a href="#PlayerTextDrawAlignment">PlayerTextDrawAlignment</a> with alignment <b><c>3</c></b> (right), the x,y coordinate is the top right coordinate for the text draw.<p/> This function merely CREATES the textdraw, you must use <a href="#PlayerTextDrawShow">PlayerTextDrawShow</a> to show it to a player.<p/> It is recommended to use WHOLE numbers instead of decimal positions when creating player textdraws to ensure resolution friendly design. <p/> </remarks> <remarks>Player-textdraws are automatically destroyed when a player disconnects.</remarks> <returns>The ID of the created textdraw.</returns>
		</member>
		<member name="M:CreateVehicle" syntax="CreateVehicle(vehicletype, x, y, z, rotation, color1, color2, respawn_delay, addsiren)">
			<attribute name="native"/>
			<referrer name="pc_cmd_rustler"/>
			<param name="vehicletype">
				The <a href="http://wiki.sa-mp.com/wiki/Vehicle_Models">model</a> for the vehicle
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
				The X coordinate for the vehicle
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
				The Y coordinate for the vehicle
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
				The Z coordinate for the vehicle
			</param>
			<param name="rotation">
				<paraminfo>Float </paraminfo>
				The facing angle for the vehicle
			</param>
			<param name="color1">
				The primary <a href="http://wiki.sa-mp.com/wiki/Color_ID">color ID</a>
			</param>
			<param name="color2">
				The secondary <a href="http://wiki.sa-mp.com/wiki/Color_ID">color ID</a>
			</param>
			<param name="respawn_delay">
				The delay until the car is respawned without a driver in <b>seconds</b>. Using <b><c>-1</c></b> will prevent the vehicle from respawning
			</param>
			<param name="addsiren">
				<b>Added in 0.3.7; will not work in earlier versions</b>. Enables the vehicle to have a siren, providing the vehicle has a horn (optional=<b><c>0</c></b>)
			</param>
			<summary>Creates a vehicle in the world. Can be used in place of <a href="#AddStaticVehicleEx">AddStaticVehicleEx</a> at any time in the script.</summary>          <seealso name="DestroyVehicle"/> <seealso name="AddStaticVehicle"/> <seealso name="AddStaticVehicleEx"/> <seealso name="GetVehicleParamsSirenState"/> <seealso name="OnVehicleSpawn"/> <seealso name="OnVehicleSirenStateChange"/> <remarks>Trains can only be added with AddStaticVehicle and AddStaticVehicleEx.</remarks> <returns> The vehicle ID of the vehicle created (<b><c>1</c></b> to <b><c>MAX_VEHICLES</c></b>).<p/> <b><c>INVALID_VEHICLE_ID (65535)</c></b> if vehicle was not created (vehicle limit reached or invalid vehicle model ID passed). </returns>
		</member>
		<member name="M:DefusePickupBomb" syntax="DefusePickupBomb(checkpointid, playerid)">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="CPInfo"/>
			<dependency name="CPInfo"/>
			<dependency name="GetPlayerScore"/>
			<dependency name="KillTimer"/>
			<dependency name="PickupInfo"/>
			<dependency name="PickupInfo"/>
			<dependency name="PlayerInfo"/>
			<dependency name="PlayerInfo"/>
			<dependency name="SendClientMessageToAll"/>
			<dependency name="SetPlayerScore"/>
			<dependency name="cp_bomb_timer"/>
			<dependency name="cp_defuse_timer"/>
			<dependency name="cp_team"/>
			<dependency name="false"/>
			<dependency name="is_active"/>
			<dependency name="is_carrying_bomb"/>
			<dependency name="is_picked_up"/>
			<dependency name="picked_up_by_team"/>
			<param name="checkpointid">
			</param>
			<param name="playerid">
			</param>
		</member>
		<member name="M:DestroyDynamicObject" syntax="DestroyDynamicObject(objectid)">
			<attribute name="native"/>
			<referrer name="TIMERFIX_OnPlayerDisconnect"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="DestroyKingCharge"/>
			<param name="objectid">
			</param>
		</member>
		<member name="M:DestroyKingCharge" syntax="DestroyKingCharge(playerid, objectid)">
			<attribute name="public"/>
			<stacksize value="12"/>
			<dependency name="Float:operator=(_:)"/>
			<dependency name="CreateCustomExplosion"/>
			<dependency name="DestroyDynamicObject"/>
			<dependency name="GetDynamicObjectPos"/>
			<param name="playerid">
			</param>
			<param name="objectid">
			</param>
		</member>
		<member name="M:DestroyObject" syntax="DestroyObject(objectid)">
			<attribute name="native"/>
			<referrer name="CA_DestroyObject_DC"/>
			<param name="objectid">
				The ID of the object to destroy. Returned by <a href="#CreateObject">CreateObject</a>
			</param>
			<summary>Destroys (removes) an object that was created using <a href="#CreateObject">CreateObject</a>.</summary>  <seealso name="CreateObject"/> <seealso name="IsValidObject"/> <seealso name="DestroyPlayerObject"/>
		</member>
		<member name="M:DestroyPickupBomb" syntax="DestroyPickupBomb(checkpointid, playerid)">
			<attribute name="public"/>
			<stacksize value="7"/>
			<dependency name="Float:operator=(_:)"/>
			<dependency name="CPInfo"/>
			<dependency name="CPInfo"/>
			<dependency name="CreateExplosion"/>
			<dependency name="GetPlayerScore"/>
			<dependency name="KillTimer"/>
			<dependency name="PickupInfo"/>
			<dependency name="PickupInfo"/>
			<dependency name="SendClientMessageToAll"/>
			<dependency name="SetPlayerScore"/>
			<dependency name="cp_bomb_timer"/>
			<dependency name="cp_defuse_timer"/>
			<dependency name="cp_team"/>
			<dependency name="cp_x"/>
			<dependency name="cp_y"/>
			<dependency name="cp_z"/>
			<dependency name="false"/>
			<dependency name="is_active"/>
			<dependency name="is_picked_up"/>
			<dependency name="picked_up_by_team"/>
			<param name="checkpointid">
			</param>
			<param name="playerid">
			</param>
		</member>
		<member name="M:DestroyPlayerVehicle" syntax="DestroyPlayerVehicle(playerid)">
			<attribute name="public"/>
			<stacksize value="3"/>
			<referrer name="pc_cmd_rustler"/>
			<dependency name="DestroyVehicle"/>
			<dependency name="PlayerInfo"/>
			<dependency name="PlayerInfo"/>
			<dependency name="player_vehicle"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:DestroyVehicle" syntax="DestroyVehicle(vehicleid)">
			<attribute name="native"/>
			<referrer name="DestroyPlayerVehicle"/>
			<param name="vehicleid">
				The ID of the vehicle to destroy
			</param>
			<summary>Destroy a vehicle. It will disappear instantly.</summary>  <seealso name="CreateVehicle"/> <seealso name="RemovePlayerFromVehicle"/> <seealso name="SetVehicleToRespawn"/> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. The vehicle does not exist. </returns>
		</member>
		<member name="M:DisableInteriorEnterExits" syntax="DisableInteriorEnterExits()">
			<attribute name="native"/>
			<referrer name="SSCANF_OnGameModeInit"/>
			<summary>Disable all the interior entrances and exits in the game (the yellow arrows at doors).</summary> <seealso name="AllowInteriorWeapons"/> <remarks>If the gamemode is changed after this function has been used, and the new gamemode doesn't disable markers, the markers will NOT reappear for already-connected players (but will for newly connected players).</remarks> <remarks>This function will only work if it has been used BEFORE a player connects (it is recommended to use it in OnGameModeInit). It will not remove a connected player's markers.</remarks> <returns>This function always returns <b><c>1</c></b>.</returns>
		</member>
		<member name="M:ForceClassSelection" syntax="ForceClassSelection(playerid)">
			<attribute name="native"/>
			<referrer name="OnPlayerDeath"/>
			<param name="playerid">
				The player to send back to class selection
			</param>
			<summary>Forces a player to go back to class selection.</summary>  <seealso name="AddPlayerClass"/> <seealso name="SetPlayerSkin"/> <seealso name="GetPlayerSkin"/> <seealso name="OnPlayerRequestClass"/> <remarks>The player will not return to class selection until they re-spawn. This can be achieved with <a href="#TogglePlayerSpectating">TogglePlayerSpectating</a>, as seen in the below example.</remarks>
		</member>
		<member name="M:ForcePerkSelection" syntax="ForcePerkSelection(playerid)">
			<stacksize value="52"/>
			<referrer name="OnPlayerRequestSpawn"/>
			<referrer name="OnDialogResponse"/>
			<dependency name="InterpolateCameraLookAt"/>
			<dependency name="InterpolateCameraPos"/>
			<dependency name="PerkInfo"/>
			<dependency name="PerkInfo"/>
			<dependency name="ShowPlayerDialog"/>
			<dependency name="SpawnPlayer"/>
			<dependency name="TogglePlayerSpectating"/>
			<dependency name="perk_title"/>
			<dependency name="strcat"/>
			<dependency name="strins"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:GetDynamicObjectPos" syntax="GetDynamicObjectPos(objectid, &amp;x, &amp;y, &amp;z)">
			<attribute name="native"/>
			<referrer name="DestroyKingCharge"/>
			<param name="objectid">
			</param>
			<param name="x">
				<paraminfo>Float &amp; </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float &amp; </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float &amp; </paraminfo>
			</param>
		</member>
		<member name="M:GetMaxPlayers" syntax="GetMaxPlayers()">
			<attribute name="native"/>
			<referrer name="SSCANF_RunInit"/>
			<summary>Returns the maximum number of players that can join the server, as set by the server variable 'maxplayers' in server.cfg.</summary> <seealso name="GetPlayerPoolSize"/> <seealso name="IsPlayerConnected"/> <remarks>This function can not be used in place of <b><c>MAX_PLAYERS</c></b>. It can not be used at compile time (e.g. for array sizes). <b><c>MAX_PLAYERS</c></b> should always be re-defined to what the 'maxplayers' var will be, or higher.</remarks> <returns>The maximum number of players that can join the server.</returns>
		</member>
		<member name="M:GetPlayerAnimationIndex" syntax="GetPlayerAnimationIndex(playerid)">
			<attribute name="native"/>
			<referrer name="SwitchPlayerTeam"/>
			<param name="playerid">
				ID of the player of whom you want to get the animation index of
			</param>
			<summary>Returns the index of any running applied animations.</summary>  <seealso name="GetAnimationName"/> <remarks>This function was added in <b>SA-MP 0.3b</b> and will not work in earlier versions!</remarks> <returns><b><c>0</c></b> if there is no animation applied.</returns>
		</member>
		<member name="M:GetPlayerDrunkLevel" syntax="GetPlayerDrunkLevel(playerid)">
			<attribute name="native"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="playerid">
				The player you want to check the drunkenness level of
			</param>
			<summary> Checks the player's level of drunkenness. If the level is less than <b><c>2000</c></b>, the player is sober. The player's level of drunkness goes down slowly automatically (1 level per frame) but will always reach <b><c>2000</c></b> at the end (in <b>0.3b</b> it will stop at <b><c>0</c></b>). The higher drunkenness levels affect the player's camera, and the car driving handling. The level of drunkenness increases when the player drinks from a bottle (You can use <a href="#SetPlayerSpecialAction">SetPlayerSpecialAction</a> to give them bottles). </summary>  <seealso name="SetPlayerDrunkLevel"/> <remarks>This function was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <returns>An integer with the level of drunkenness of the player.</returns>
		</member>
		<member name="M:GetPlayerFacingAngle" syntax="GetPlayerFacingAngle(playerid, &amp;ang)">
			<attribute name="native"/>
			<referrer name="CA_IsPlayerFacingWater"/>
			<referrer name="CA_IsPlayerBlocked"/>
			<referrer name="pc_cmd_rustler"/>
			<param name="playerid">
				The player you want to get the angle of
			</param>
			<param name="ang">
				<paraminfo>Float &amp; </paraminfo>
				The Float to store the angle in, passed by reference
			</param>
			<summary>Gets the angle a player is facing.</summary>   <seealso name="GetVehicleZAngle"/> <seealso name="SetPlayerFacingAngle"/> <remarks>Angles are reversed in GTA:SA; 90 degrees would be East in the real world, but in GTA:SA 90 degrees is in fact West. North and South are still 0/360 and 180. To convert this, simply do <b>360 - angle</b>.</remarks> <remarks>Angles returned when inside a vehicle is rarely correct. To get the correct facing angle while inside a vehicle, use <a href="#GetVehicleZAngle">GetVehicleZAngle</a>.</remarks>
		</member>
		<member name="M:GetPlayerLastDamager" syntax="GetPlayerLastDamager(playerid, &amp;issuerid, &amp;weapon)">
			<stacksize value="1"/>
			<referrer name="OnPlayerDeath"/>
			<dependency name="PlayerLastDamagerInfo"/>
			<dependency name="player_last_damagerid"/>
			<dependency name="player_last_damagerid_weapon"/>
			<param name="playerid">
			</param>
			<param name="issuerid">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="weapon">
				<paraminfo> &amp; </paraminfo>
			</param>
		</member>
		<member name="M:GetPlayerLastShotVectors" syntax="GetPlayerLastShotVectors(playerid, &amp;fOriginX, &amp;fOriginY, &amp;fOriginZ, &amp;fHitPosX, &amp;fHitPosY, &amp;fHitPosZ)">
			<attribute name="native"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="playerid">
				The ID of the player to get the last bullet shot information of
			</param>
			<param name="fOriginX">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to save the X coordinate of where the bullet originated from
			</param>
			<param name="fOriginY">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to save the Y coordinate of where the bullet originated from
			</param>
			<param name="fOriginZ">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to save the Z coordinate of where the bullet originated from
			</param>
			<param name="fHitPosX">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to save the X coordinate of where the bullet hit
			</param>
			<param name="fHitPosY">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to save the Y coordinate of where the bullet hit
			</param>
			<param name="fHitPosZ">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to save the Z coordinate of where the bullet hit
			</param>
			<summary>Retrieves the start and end (hit) position of the last bullet a player fired.</summary>        <seealso name="GetPlayerWeaponData"/> <seealso name="GetPlayerWeapon"/> <seealso name="VectorSize"/> <seealso name="OnPlayerWeaponShot"/> <remarks>This function was added in <b>SA-MP 0.3z</b> and will not work in earlier versions!</remarks> <remarks>This function will only work when <a href="http://wiki.sa-mp.com/wiki/Lag_Compensation">lag compensation</a> is <b>enabled</b>. </remarks> <remarks>If the player hit nothing, the hit positions will be <b><c>0</c></b>. This means you can't currently calculate how far a bullet travels through open air. </remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. The player specified does not exist.<p/> </returns>
		</member>
		<member name="M:GetPlayerName" syntax="GetPlayerName(playerid, name[], len)">
			<attribute name="native"/>
			<referrer name="SSCANF_RunInit"/>
			<referrer name="OnPlayerConnect"/>
			<param name="playerid">
				The ID of the player to get the name of
			</param>
			<param name="name">
				<paraminfo> [] </paraminfo>
				An array into which to store the name, passed by reference
			</param>
			<param name="len">
				The length of the string that should be stored. Recommended to be <b><c>MAX_PLAYER_NAME</c></b>
			</param>
			<summary>Get a player's name.</summary>    <seealso name="SetPlayerName"/> <seealso name="GetPlayerIp"/> <seealso name="GetPlayerPing"/> <seealso name="GetPlayerScore"/> <seealso name="GetPlayerVersion"/> <remarks>A player's name can be up to 24 characters long (as of <b>0.3d R2</b>) by using <a href="#SetPlayerName">SetPlayerName</a>. This is defined in <c>a_samp.inc</c> as <b><c>MAX_PLAYER_NAME</c></b>. However, the client can only join with a nickname between 3 and 20 characters, otherwise the connection will be rejected and the player has to quit to choose a valid name.</remarks> <returns>The length of the player's name. <b><c>0</c></b> if player specified doesn't exist.</returns>
		</member>
		<member name="M:GetPlayerPos" syntax="GetPlayerPos(playerid, &amp;x, &amp;y, &amp;z)">
			<attribute name="native"/>
			<referrer name="CA_IsPlayerOnSurface"/>
			<referrer name="CA_IsPlayerInWater"/>
			<referrer name="CA_IsPlayerNearWater"/>
			<referrer name="CA_IsPlayerFacingWater"/>
			<referrer name="CA_IsPlayerBlocked"/>
			<referrer name="CreateCustomExplosion"/>
			<referrer name="pc_cmd_rustler"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="playerid">
				The ID of the player to get the position of
			</param>
			<param name="x">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to store the X coordinate in, passed by reference
			</param>
			<param name="y">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to store the Y coordinate in, passed by reference
			</param>
			<param name="z">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to store the Z coordinate in, passed by reference
			</param>
			<summary>Get the position of a player, represented by X, Y and Z coordinates.</summary>     <seealso name="SetPlayerPos"/> <seealso name="GetVehiclePos"/> <seealso name="IsPlayerInRangeOfPoint"/> <seealso name="GetPlayerDistanceFromPoint"/> <remarks>This function is known to return unreliable values when used in <a href="#OnPlayerDisconnect">OnPlayerDisconnect</a> and <a href="#OnPlayerRequestClass">OnPlayerRequestClass</a>. This is because the player is not spawned.</remarks> <returns><b><c>true</c></b> on success, <b><c>false</c></b> on failure (i.e. player not connected).</returns>
		</member>
		<member name="M:GetPlayerScore" syntax="GetPlayerScore(playerid)">
			<attribute name="native"/>
			<referrer name="DestroyPickupBomb"/>
			<referrer name="DefusePickupBomb"/>
			<param name="playerid">
				The player to get the score of
			</param>
			<summary>This function returns a player's score as it was set using <a href="#SetPlayerScore">SetPlayerScore</a>.</summary>  <seealso name="SetPlayerScore"/> <seealso name="GetPlayerPing"/> <returns>The player's score.</returns>
		</member>
		<member name="M:GetPlayerTeam" syntax="GetPlayerTeam(playerid)">
			<attribute name="native"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerEnterDynamicCP"/>
			<param name="playerid">
				The ID of the player to get the team of
			</param>
			<summary>Get the ID of the team the player is on.</summary>  <seealso name="SetPlayerTeam"/> <seealso name="SetTeamCount"/> <returns> <b><c>0-254</c></b>: The player's team. (<b><c>0</c></b> is a valid team).<p/> <b><c>255</c></b>: Defined as <b><c>NO_TEAM</c></b>. The player is not on any team.<p/> <b><c>-1</c></b>: The function failed to execute. Player is not connected. </returns>
		</member>
		<member name="M:GetPlayerVehicleID" syntax="GetPlayerVehicleID(playerid)">
			<attribute name="native"/>
			<referrer name="pc_cmd_cjump"/>
			<param name="playerid">
				The ID of the player in the vehicle that you want to get the ID of
			</param>
			<summary>This function gets the ID of the vehicle the player is currently in. Note: <b>NOT</b> the model id of the vehicle. See <a href="#GetVehicleModel">GetVehicleModel</a> for that.</summary>  <seealso name="IsPlayerInVehicle"/> <seealso name="IsPlayerInAnyVehicle"/> <seealso name="GetPlayerVehicleSeat"/> <seealso name="GetVehicleModel"/> <returns>ID of the vehicle or <b><c>0</c></b> if not in a vehicle.</returns>
		</member>
		<member name="M:GetPlayerVelocity" syntax="GetPlayerVelocity(playerid, &amp;X, &amp;Y, &amp;Z)">
			<attribute name="native"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="playerid">
				The player to get the speed from
			</param>
			<param name="X">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to store the velocity on the X axis, passed by reference
			</param>
			<param name="Y">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to store the velocity on the Y axis, passed by reference
			</param>
			<param name="Z">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to store the velocity on the Z axis, passed by reference
			</param>
			<summary>Get the velocity (speed) of a player on the X, Y and Z axes.</summary>     <seealso name="SetPlayerVelocity"/> <seealso name="SetVehicleVelocity"/> <seealso name="GetVehicleVelocity"/> <remarks>This function was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks>
		</member>
		<member name="M:GetVehicleModel" syntax="GetVehicleModel(vehicleid)">
			<attribute name="native"/>
			<referrer name="pc_cmd_cjump"/>
			<param name="vehicleid">
				The ID of the vehicle to get the model of
			</param>
			<summary>Gets the <a href="http://wiki.sa-mp.com/wiki/Vehicle_Models">model ID</a> of a vehicle.</summary>  <seealso name="GetPlayerVehicleID"/> <seealso name="GetVehiclePos"/> <seealso name="GetVehicleZAngle"/> <seealso name="GetPlayerVehicleSeat"/> <returns>The vehicle's <a href="http://wiki.sa-mp.com/wiki/Vehicle_Models">model ID</a>, or <b><c>0</c></b> if the vehicle doesn't exist.</returns>
		</member>
		<member name="M:GetVehiclePos" syntax="GetVehiclePos(vehicleid, &amp;x, &amp;y, &amp;z)">
			<attribute name="native"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="vehicleid">
				The ID of the vehicle to get the position of
			</param>
			<param name="x">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to store the X coordinate, passed by reference
			</param>
			<param name="y">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to store the Y coordinate, passed by reference
			</param>
			<param name="z">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to store the Z coordinate, passed by reference
			</param>
			<summary>Gets the position of a vehicle.</summary>     <seealso name="GetVehicleDistanceFromPoint"/> <seealso name="SetVehiclePos"/> <seealso name="GetVehicleZAngle"/> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. The vehicle specified does not exist. </returns>
		</member>
		<member name="M:GetVehicleVelocity" syntax="GetVehicleVelocity(vehicleid, &amp;X, &amp;Y, &amp;Z)">
			<attribute name="native"/>
			<referrer name="pc_cmd_cjump"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="vehicleid">
				The ID of the vehicle to get the velocity of
			</param>
			<param name="X">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in to which to store the vehicle's X velocity, passed by reference
			</param>
			<param name="Y">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in to which to store the vehicle's Y velocity, passed by reference
			</param>
			<param name="Z">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in to which to store the vehicle's Z velocity, passed by reference
			</param>
			<summary>Get the velocity of a vehicle on the X, Y and Z axes.</summary>     <seealso name="GetPlayerVelocity"/> <seealso name="SetVehicleVelocity"/> <seealso name="SetPlayerVelocity"/> <remarks>This function was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <remarks>Multiply vector with <b><c>250.66667</c></b> for kmph or <b><c>199.416667</c></b> for mph or something...</remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the vehicle specified does not exist.<p/> </returns>
		</member>
		<member name="M:GetVehicleZAngle" syntax="GetVehicleZAngle(vehicleid, &amp;z_angle)">
			<attribute name="native"/>
			<referrer name="pc_cmd_cjump"/>
			<param name="vehicleid">
				The ID of the vehicle to get the Z angle of
			</param>
			<param name="z_angle">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to store the Z rotation, passed by reference
			</param>
			<summary>Get the rotation of a vehicle on the Z axis (yaw).</summary>   <seealso name="GetVehicleRotationQuat"/> <seealso name="GetVehicleRotation"/> <seealso name="SetVehicleZAngle"/> <seealso name="GetVehiclePos"/> <seealso name="GetPlayerFacingAngle"/> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the vehicle does not exist. </returns>
		</member>
		<member name="M:GivePlayerMoney" syntax="GivePlayerMoney(playerid, money)">
			<attribute name="native"/>
			<referrer name="SSCANF_OnPlayerConnect"/>
			<param name="playerid">
				The ID of the player to give money to or take money from
			</param>
			<param name="money">
				The amount of money to give the player. Use a minus value to take money
			</param>
			<summary>Give money to or take money from a player.</summary>   <seealso name="ResetPlayerMoney"/> <seealso name="GetPlayerMoney"/> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the player is not connected. </returns>
		</member>
		<member name="M:GivePlayerWeapon" syntax="GivePlayerWeapon(playerid, weaponid, ammo)">
			<attribute name="native"/>
			<referrer name="OnPlayerSpawn"/>
			<param name="playerid">
				The ID of the player to give a weapon to
			</param>
			<param name="weaponid">
				The ID of the weapon to give to the player
			</param>
			<param name="ammo">
				The amount of ammo to give to the player
			</param>
			<summary>Give a player a weapon with a specified amount of ammo.</summary>    <seealso name="SetPlayerArmedWeapon"/> <seealso name="GetPlayerWeapon"/> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the player is not connected.<p/> </returns>
		</member>
		<member name="M:InterpolateCameraLookAt" syntax="InterpolateCameraLookAt(playerid, FromX, FromY, FromZ, ToX, ToY, ToZ, time, cut)">
			<attribute name="native"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="ForcePerkSelection"/>
			<param name="playerid">
				The ID of the player the camera should be moved for
			</param>
			<param name="FromX">
				<paraminfo>Float </paraminfo>
				The X position the camera should start to move from
			</param>
			<param name="FromY">
				<paraminfo>Float </paraminfo>
				The Y position the camera should start to move from
			</param>
			<param name="FromZ">
				<paraminfo>Float </paraminfo>
				The Z position the camera should start to move from
			</param>
			<param name="ToX">
				<paraminfo>Float </paraminfo>
				The X position the camera should move to
			</param>
			<param name="ToY">
				<paraminfo>Float </paraminfo>
				The Y position the camera should move to
			</param>
			<param name="ToZ">
				<paraminfo>Float </paraminfo>
				The Z position the camera should move to
			</param>
			<param name="time">
				Time in milliseconds to complete interpolation
			</param>
			<param name="cut">
				The 'jumpcut' to use. Set to <b><c>CAMERA_MOVE</c></b> for interpolation (optional=<b><c>CAMERA_CUT</c></b>)
			</param>
			<summary>Interpolate a player's camera's 'look at' point between two coordinates with a set speed. Can be be used with <a href="#InterpolateCameraPos">InterpolateCameraPos</a>.</summary>          <seealso name="InterpolateCameraPos"/> <seealso name="SetPlayerCameraLookAt"/> <seealso name="SetPlayerCameraPos"/> <remarks>This function was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks> <remarks>Use <b><c>TogglePlayerSpectating</c></b> to make objects stream in for the player while the camera is moving. You can reset the camera behind the player with <b><c>SetCameraBehindPlayer</c></b>.</remarks>
		</member>
		<member name="M:InterpolateCameraPos" syntax="InterpolateCameraPos(playerid, FromX, FromY, FromZ, ToX, ToY, ToZ, time, cut)">
			<attribute name="native"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="ForcePerkSelection"/>
			<param name="playerid">
				The ID of the player the camera should be moved for
			</param>
			<param name="FromX">
				<paraminfo>Float </paraminfo>
				The X position the camera should start to move from
			</param>
			<param name="FromY">
				<paraminfo>Float </paraminfo>
				The Y position the camera should start to move from
			</param>
			<param name="FromZ">
				<paraminfo>Float </paraminfo>
				The Z position the camera should start to move from
			</param>
			<param name="ToX">
				<paraminfo>Float </paraminfo>
				The X position the camera should move to
			</param>
			<param name="ToY">
				<paraminfo>Float </paraminfo>
				The Y position the camera should move to
			</param>
			<param name="ToZ">
				<paraminfo>Float </paraminfo>
				The Z position the camera should move to
			</param>
			<param name="time">
				Time in milliseconds
			</param>
			<param name="cut">
				The jumpcut to use. Set to <b><c>CAMERA_MOVE</c></b> for a smooth movement (optional=<b><c>CAMERA_CUT</c></b>)
			</param>
			<summary>Move a player's camera from one position to another, within the set time. Useful for scripted cut scenes.</summary>          <seealso name="InterpolateCameraLookAt"/> <seealso name="SetPlayerCameraPos"/> <seealso name="SetPlayerCameraLookAt"/> <remarks>This function was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks> <remarks>Use <b><c>TogglePlayerSpectating</c></b> to make objects stream in for the player while the camera is moving. You can reset the camera behind the player with <b><c>SetCameraBehindPlayer</c></b>.</remarks>
		</member>
		<member name="M:IsPlayerConnected" syntax="IsPlayerConnected(playerid)">
			<attribute name="native"/>
			<referrer name="SSCANF_RunInit"/>
			<referrer name="CreateCustomExplosion"/>
			<param name="playerid">
				The ID of the player to check
			</param>
			<summary>Checks if a player is connected (if an ID is taken by a connected player).</summary>  <seealso name="IsPlayerAdmin"/> <seealso name="OnPlayerConnect"/> <seealso name="OnPlayerDisconnect"/> <remarks>This function can be omitted in a lot of cases. Many other functions already have some sort of connection check built in.</remarks> <returns><b><c>1</c></b> if the player is connected, <b><c>0</c></b> if not.</returns>
		</member>
		<member name="M:IsPlayerInVehicle" syntax="IsPlayerInVehicle(playerid, vehicleid)">
			<attribute name="native"/>
			<referrer name="IsVehicleOccupied"/>
			<param name="playerid">
				ID of the player
			</param>
			<param name="vehicleid">
				ID of the vehicle
			</param>
			<summary>Checks if a player is in a specific vehicle.</summary>   <seealso name="IsPlayerInAnyVehicle"/> <seealso name="GetPlayerVehicleSeat"/> <returns><b><c>1</c></b> if the player is in the vehicle, <b><c>0</c></b> if not.</returns>
		</member>
		<member name="M:IsPlayerNPC" syntax="IsPlayerNPC(playerid)">
			<attribute name="native"/>
			<referrer name="SSCANF_RunInit"/>
			<referrer name="OnPlayerConnect"/>
			<param name="playerid">
				The ID of the player to check
			</param>
			<summary>Check if a player is an actual player or an NPC.</summary>  <seealso name="ConnectNPC"/> <seealso name="IsPlayerAdmin"/> <remarks>This function was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <returns><b><c>1</c></b> if the player is an NPC, <b><c>0</c></b> if not.</returns>
		</member>
		<member name="M:IsVehicleOccupied" syntax="IsVehicleOccupied(vehicleid)">
			<tagname value="bool"/>
			<stacksize value="5"/>
			<referrer name="OnPlayerWeaponShot"/>
			<dependency name="IsPlayerInVehicle"/>
			<dependency name="false"/>
			<dependency name="true"/>
			<param name="vehicleid">
			</param>
		</member>
		<member name="M:KillPlayerTimers" syntax="KillPlayerTimers(playerid)">
			<attribute name="native"/>
			<referrer name="SSCANF_OnPlayerDisconnect"/>
			<param name="playerid">
				The player that owns the timers.
			</param>
			<summary>Kills all timers a player owns.</summary>   
		</member>
		<member name="M:KillTimer" syntax="KillTimer(timerid)">
			<attribute name="native"/>
			<referrer name="OnPlayerLeaveDynamicCP"/>
			<referrer name="DestroyPickupBomb"/>
			<referrer name="DefusePickupBomb"/>
			<param name="timerid">
				The ID of the timer to kill (returned by <a href="#SetTimer">SetTimer</a> or <a href="#SetTimerEx">SetTimerEx</a>)
			</param>
			<summary>Kills (stops) a running timer.</summary>  <seealso name="SetTimer"/> <seealso name="SetTimerEx"/> <returns>This function always returns <b><c>0</c></b>.</returns>
		</member>
		<member name="M:LimitPlayerMarkerRadius" syntax="LimitPlayerMarkerRadius(marker_radius)">
			<attribute name="native"/>
			<referrer name="SSCANF_OnGameModeInit"/>
			<param name="marker_radius">
				<paraminfo>Float </paraminfo>
				The radius that markers will show at
			</param>
			<summary>Set the player marker radius.</summary>  <seealso name="ShowPlayerMarkers"/> <seealso name="SetPlayerMarkerForPlayer"/> <seealso name="LimitGlobalChatRadius"/> <remarks>This Function was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks>
		</member>
		<member name="M:MoveDynamicObject" syntax="MoveDynamicObject(objectid, x, y, z, speed, rx, ry, rz)">
			<attribute name="native"/>
			<referrer name="OnPlayerTakeDamage"/>
			<param name="objectid">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="speed">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="rx">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="ry">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="rz">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:OnActorStreamIn" syntax="OnActorStreamIn(actorid, forplayerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="actorid">
				The ID of the actor that has been streamed in for the player
			</param>
			<param name="forplayerid">
				The ID of the player that streamed the actor in
			</param>
			<summary>This callback is called when an actor is streamed in by a player's client.</summary>   <seealso name="OnActorStreamOut"/> <seealso name="OnPlayerStreamIn"/> <remarks>This function was added in <b>SA-MP 0.3.7</b> and will not work in earlier versions!</remarks> <remarks>This callback can also be called by NPC.</remarks> <remarks>It is always called first in filterscripts.</remarks> <returns>This callback does not handle returns.</returns>
		</member>
		<member name="M:OnActorStreamOut" syntax="OnActorStreamOut(actorid, forplayerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="actorid">
				The ID of the actor that has been streamed out for the player
			</param>
			<param name="forplayerid">
				The ID of the player that streamed the actor out
			</param>
			<summary>This callback is called when an actor is streamed out by a player's client.</summary>   <seealso name="OnActorStreamIn"/> <seealso name="OnPlayerStreamOut"/> <remarks>This function was added in <b>SA-MP 0.3.7</b> and will not work in earlier versions!</remarks> <remarks>This callback can also be called by NPC.</remarks> <remarks>It is always called first in filterscripts.</remarks> <returns>This callback does not handle returns.</returns>
		</member>
		<member name="M:OnCachedInit" syntax="OnCachedInit()">
			<attribute name="public"/>
			<stacksize value="3"/>
			<dependency name="SSCANF_OnCachedInit"/>
			<dependency name="SSCANF_RunInit"/>
			<library>sscanf</library>  <remarks>  Called when the script starts if it is (legacy) YSI cached mode.  </remarks> 
		</member>
		<member name="M:OnClientCheckResponse" syntax="OnClientCheckResponse(playerid, actionid, memaddr, retndata)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player checked
			</param>
			<param name="actionid">
				The type of check performed
			</param>
			<param name="memaddr">
				The address requested
			</param>
			<param name="retndata">
				The result of the check
			</param>
			<summary>This callback is called when a SendClientCheck request comletes</summary>     <seealso name="SendClientCheck"/>
		</member>
		<member name="M:OnDialogResponse" syntax="OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])">
			<attribute name="public"/>
			<stacksize value="4"/>
			<dependency name="ForcePerkSelection"/>
			<dependency name="PlayerInfo"/>
			<dependency name="PlayerInfo"/>
			<dependency name="TogglePlayerSpectating"/>
			<dependency name="false"/>
			<dependency name="player_change_team"/>
			<dependency name="player_perk"/>
			<param name="playerid">
				The ID of the player that responded to the dialog
			</param>
			<param name="dialogid">
				The ID of the dialog the player responded to, assigned in ShowPlayerDialog
			</param>
			<param name="response">
				<b><c>1</c></b> for left button and <b><c>0</c></b> for right button (if only one button shown, always <b><c>1</c></b>)
			</param>
			<param name="listitem">
				The ID of the list item selected by the player (starts at <b><c>0</c></b>) (only if using a list style dialog)
			</param>
			<param name="inputtext">
				<paraminfo> [] </paraminfo>
				The text entered into the input box by the player or the selected list item text
			</param>
			<summary>This callback is called when a player responds to a dialog shown using <a href="#ShowPlayerDialog">ShowPlayerDialog</a> by either clicking a button, pressing ENTER/ESC or double-clicking a list item (if using a list style dialog).</summary>      <seealso name="ShowPlayerDialog"/> <remarks>This callback was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <remarks>A player's dialog doesn't hide when the gamemode restarts, causing the server to print <c>"Warning: PlayerDialogResponse PlayerId: 0 dialog ID doesn't match last sent dialog ID"</c> if a player responded to this dialog after restart.</remarks> <remarks>Parameters can contain different values, based on dialog's <a href="http://wiki.sa-mp.com/wiki/Dialog_Styles">style</a>.</remarks> <returns> Returning <b><c>0</c></b> in this callback will pass the dialog to another script in case no matching code were found in your gamemode's callback.<p/> It is always called first in filterscripts so returning <b><c>1</c></b> there blocks other filterscripts from seeing it. </returns>
		</member>
		<member name="M:OnDynamicActorStreamIn" syntax="OnDynamicActorStreamIn(actorid, forplayerid)">
			<stacksize value="1"/>
			<param name="actorid">
			</param>
			<param name="forplayerid">
			</param>
		</member>
		<member name="M:OnDynamicActorStreamOut" syntax="OnDynamicActorStreamOut(actorid, forplayerid)">
			<stacksize value="1"/>
			<param name="actorid">
			</param>
			<param name="forplayerid">
			</param>
		</member>
		<member name="M:OnDynamicObjectMoved" syntax="OnDynamicObjectMoved(objectid)">
			<stacksize value="1"/>
			<param name="objectid">
			</param>
		</member>
		<member name="M:OnEnterExitModShop" syntax="OnEnterExitModShop(playerid, enterexit, interiorid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that entered or exited the modshop
			</param>
			<param name="enterexit">
				<b><c>1</c></b> if the player entered or <b><c>0</c></b> if they exited
			</param>
			<param name="interiorid">
				The interior ID of the modshop that the player is entering (or 0 if exiting)
			</param>
			<summary>This callback is called when a player enters or exits a mod shop.</summary>    <seealso name="OnVehicleMod"/> <seealso name="OnVehicleRespray"/> <seealso name="OnVehiclePaintjob"/> <seealso name="AddVehicleComponent"/> <remarks>This callback was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <remarks>Players collide when they get into the same mod shop.</remarks> <returns> This callback does not handle returns.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnFilterScriptExit" syntax="OnFilterScriptExit()">
			<attribute name="public"/>
			<stacksize value="4"/>
			<dependency name="CA_DestroyAllObjects_DC"/>
			<dependency name="CallLocalFunction"/>
			<dependency name="funcidx"/>
			<summary>This callback is called when a filterscript is unloaded. It is only called inside the filterscript which is unloaded.</summary> <seealso name="OnFilterScriptInit"/> <seealso name="OnGameModeInit"/> <seealso name="OnGameModeExit"/> <returns>This callback does not handle returns.</returns>
		</member>
		<member name="M:OnFilterScriptInit" syntax="OnFilterScriptInit()">
			<attribute name="public"/>
			<stacksize value="3"/>
			<dependency name="SSCANF_OnFilterScriptInit"/>
			<dependency name="SSCANF_RunInit"/>
			<dependency name="SSCANF_gInit"/>
			<summary>This callback is called when a filterscript is initialized (loaded). It is only called inside the filterscript which is starting.</summary> <seealso name="OnFilterScriptExit"/> <seealso name="OnGameModeInit"/> <seealso name="OnGameModeExit"/> <returns>This callback does not handle returns.</returns><p/> <library>sscanf</library>  <remarks>  Called when the script starts if it is a filterscript, sets up the system,  then calls the "real" OnFilterScriptInit (using the new ALS 2 hook method).  </remarks> 
		</member>
		<member name="M:OnGameModeExit" syntax="OnGameModeExit()">
			<attribute name="public"/>
			<stacksize value="4"/>
			<dependency name="CA_DestroyAllObjects_DC"/>
			<dependency name="CallLocalFunction"/>
			<dependency name="funcidx"/>
			<summary>This callback is called when a gamemode ends, either through 'gmx', the server being shut down, or <a href="#GameModeExit">GameModeExit</a>.</summary> <seealso name="OnGameModeInit"/> <seealso name="OnFilterScriptExit"/> <seealso name="OnFilterScriptInit"/> <seealso name="GameModeExit"/> <remarks>This function can also be used in a filterscript to detect if the gamemode changes with RCON commands like changemode or gmx, as changing the gamemode does not reload a filterscript.</remarks> <remarks>When using OnGameModeExit in conjunction with the 'rcon gmx' console command keep in mind there is a potential for client bugs to occur an example of this is excessive <a href="#RemoveBuildingForPlayer">RemoveBuildingForPlayer</a> calls during OnGameModeInit which could result in a client crash. </remarks> <remarks>This callback will NOT be called if the server crashes or the process is killed by other means, such as using the Linux kill command or pressing the close-button on the Windows console. </remarks> <returns> <b><c>0</c></b> - Will prevent other filterscripts from receiving this callback.<p/> <b><c>1</c></b> - Indicates that this callback will be passed to the next filterscript.<p/> It is always called first in gamemode. </returns>
		</member>
		<member name="M:OnGameModeInit" syntax="OnGameModeInit()">
			<attribute name="public"/>
			<stacksize value="2"/>
			<dependency name="PC_Init"/>
			<summary>This callback is triggered when the gamemode starts.</summary> <seealso name="OnGameModeExit"/> <seealso name="OnFilterScriptInit"/> <seealso name="OnFilterScriptExit"/> <remarks>This function can also be used in a filterscript to detect if the gamemode changes with RCON commands like changemode or gmx, as changing the gamemode does not reload a filterscript.</remarks> <returns> <b><c>0</c></b> - Will prevent other filterscripts from receiving this callback.<p/> <b><c>1</c></b> - Indicates that this callback will be passed to the next filterscript.<p/> It is always called first in gamemode. </returns>
		</member>
		<member name="M:OnIncomingConnection" syntax="OnIncomingConnection(playerid, ip_address[], port)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player attempting to connect
			</param>
			<param name="ip_address">
				<paraminfo> [] </paraminfo>
				The IP address of the player attempting to connect
			</param>
			<param name="port">
				The port of the attempted connection
			</param>
			<summary>This callback is called when an IP address attempts a connection to the server. To block incoming connections, use <a href="#BlockIpAddress">BlockIpAddress</a>.</summary>    <seealso name="OnPlayerConnect"/> <seealso name="OnPlayerDisconnect"/> <seealso name="OnPlayerFinishedDownloading"/> <seealso name="BlockIpAddress"/> <seealso name="UnBlockIpAddress"/> <remarks> 	This callback was added in <b>SA-MP 0.3z R2-2</b> and will not work in earlier versions!</remarks> <returns> <b><c>1</c></b> - Will prevent other filterscripts from receiving this callback.<p/> <b><c>0</c></b> - Indicates that this callback will be passed to the next filterscript.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnObjectMoved" syntax="OnObjectMoved(objectid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="objectid">
				The ID of the object that was moved
			</param>
			<summary>This callback is called when an object is moved after <a href="#MoveObject">MoveObject</a> (when it stops moving).</summary>  <seealso name="MoveObject"/> <seealso name="IsObjectMoving"/> <seealso name="StopObject"/> <seealso name="OnPlayerObjectMoved"/> <remarks><a href="#SetObjectPos">SetObjectPos</a> does not work when used in this callback. To fix it, recreate the object.</remarks> <returns> This callback does not handle returns.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerClickMap" syntax="OnPlayerClickMap(playerid, fX, fY, fZ)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that placed a target/waypoint
			</param>
			<param name="fX">
				<paraminfo>Float </paraminfo>
				The X float coordinate where the player clicked
			</param>
			<param name="fY">
				<paraminfo>Float </paraminfo>
				The Y float coordinate where the player clicked
			</param>
			<param name="fZ">
				<paraminfo>Float </paraminfo>
				The Z float coordinate where the player clicked (inaccurate - see note below)
			</param>
			<summary>OnPlayerClickMap is called when a player places a target/waypoint on the pause menu map (by right-clicking).</summary>     <seealso name="SetPlayerPos"/> <seealso name="SetPlayerPosFindZ"/> <seealso name="GetPlayerPos"/> <remarks>This callback was added in <b>SA-MP 0.3d</b> and will not work in earlier versions!</remarks> <remarks>The Z value returned will be <b><c>0</c></b> (invalid) if it is far away from the player; use the <a href="http://forum.sa-mp.com/showthread.php?t=275492">MapAndreas plugin</a> to get a more accurate Z coordinate.</remarks> <returns> <b><c>1</c></b> - Will prevent other filterscripts from receiving this callback.<p/> <b><c>0</c></b> - Indicates that this callback will be passed to the next filterscript.<p/> It is always called first in gamemode. </returns>
		</member>
		<member name="M:OnPlayerClickPlayer" syntax="OnPlayerClickPlayer(playerid, clickedplayerid, source)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that clicked on a player on the scoreboard
			</param>
			<param name="clickedplayerid">
				The ID of the player that was clicked on
			</param>
			<param name="source">
				The source of the player's click
			</param>
			<summary>Called when a player double-clicks on a player on the scoreboard.</summary>    <seealso name="OnPlayerClickTextDraw"/> <remarks>This callback was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <remarks>There is currently only one <paramref name="source"/> (<b><c>0 - CLICK_SOURCE_SCOREBOARD</c></b>). The existence of this argument suggests that more sources may be supported in the future.</remarks> <returns> <b><c>1</c></b> - Will prevent other filterscripts from receiving this callback.<p/> <b><c>0</c></b> - Indicates that this callback will be passed to the next filterscript.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerClickPlayerTextDraw" syntax="OnPlayerClickPlayerTextDraw(playerid, playertextid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that selected a textdraw
			</param>
			<param name="playertextid">
				<paraminfo>PlayerText </paraminfo>
				The ID of the player-textdraw that the player selected
			</param>
			<summary>This callback is called when a player clicks on a player-textdraw. It is not called when player cancels the select mode (ESC) - however, <a href="#OnPlayerClickTextDraw">OnPlayerClickTextDraw</a> is.</summary>   <seealso name="PlayerTextDrawSetSelectable"/> <seealso name="OnPlayerClickTextDraw"/> <seealso name="OnPlayerClickPlayer"/> <remarks>This callback was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks> <remarks>When a player presses ESC to cancel selecting a textdraw, <a href="#OnPlayerClickTextDraw">OnPlayerClickTextDraw</a> is called with a textdraw ID of <b><c>INVALID_TEXT_DRAW</c></b>. <a href="#OnPlayerClickPlayerTextDraw">OnPlayerClickPlayerTextDraw</a> won't be called also.</remarks> <returns> Returning <b><c>1</c></b> in this callback will prevent it being called in other scripts. This should be used to signal that the textdraw on which they clicked was 'found' and no further processing is needed. You should return <b><c>0</c></b> if the textdraw on which they clicked wasn't found, just like in <a href="#OnPlayerCommandText">OnPlayerCommandText</a>.<p/> It is always called first in filterscripts so returning <b><c>1</c></b> there also blocks other scripts from seeing it. </returns>
		</member>
		<member name="M:OnPlayerClickTextDraw" syntax="OnPlayerClickTextDraw(playerid, clickedid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that clicked on the textdraw
			</param>
			<param name="clickedid">
				<paraminfo>Text </paraminfo>
				The ID of the clicked textdraw. <b><c>INVALID_TEXT_DRAW</c></b> if selection was cancelled
			</param>
			<summary>This callback is called when a player clicks on a textdraw or cancels the select mode with the Escape key.</summary>   <seealso name="OnPlayerClickPlayerTextDraw"/> <seealso name="OnPlayerClickPlayer"/> <remarks>This callback was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks> <remarks>The clickable area is defined by <a href="#TextDrawTextSize">TextDrawTextSize</a>. The x and y parameters passed to that function must not be zero or negative. </remarks> <remarks>Do not use <a href="#CancelSelectTextDraw">CancelSelectTextDraw</a> unconditionally within this callback. This results in an infinite loop. </remarks> <returns> Returning <b><c>1</c></b> in this callback will prevent it being called in other scripts. This should be used to signal that the textdraw on which they clicked was 'found' and no further processing is needed. You should return <b><c>0</c></b> if the textdraw on which they clicked wasn't found, just like in <a href="#OnPlayerCommandText">OnPlayerCommandText</a>.<p/> It is always called first in filterscripts so returning <b><c>1</c></b> there also blocks other scripts from seeing it. </returns>
		</member>
		<member name="M:OnPlayerCommandText" syntax="OnPlayerCommandText(playerid, cmdtext[])">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that entered a command
			</param>
			<param name="cmdtext">
				<paraminfo> [] </paraminfo>
				The command that was entered (including the forward slash)
			</param>
			<summary>This callback is called when a player enters a command into the client chat window. Commands are anything that start with a forward slash, e.g. <c>/help</c>.</summary>   <seealso name="OnPlayerText"/> <seealso name="OnRconCommand"/> <seealso name="SendRconCommand"/> <remarks>This callback can also be called by NPC.</remarks> <returns> Return <b><c>1</c></b> if the command was processed, otherwise <b><c>0</c></b>; If the command was not found both in filterscripts and in gamemode, the player will be received a message: <em>SERVER: Unknown command</em>.<p/> It is always called first in filterscripts so returning <b><c>1</c></b> there blocks other scripts from seeing it. </returns>
		</member>
		<member name="M:OnPlayerConnect" syntax="OnPlayerConnect(playerid)">
			<attribute name="public"/>
			<stacksize value="30"/>
			<dependency name="GetPlayerName"/>
			<dependency name="IsPlayerNPC"/>
			<dependency name="SSCANF_Join"/>
			<dependency name="SSCANF_OnPlayerConnect"/>
			<dependency name="SSCANF_gInit"/>
			<param name="playerid">
				The ID of the player that connected
			</param>
			<summary>This callback is called when a player connects to the server.</summary>  <seealso name="OnPlayerDisconnect"/> <seealso name="OnIncomingConnection"/> <seealso name="OnPlayerFinishedDownloading"/> <remarks>This callback can also be called by NPC.</remarks> <returns> <b><c>0</c></b> - Will prevent other filterscripts from receiving this callback.<p/> <b><c>1</c></b> - Indicates that this callback will be passed to the next filterscript.<p/> It is always called first in filterscripts. </returns><p/> <library>sscanf</library>  <remarks>  Called when a player connects.  Actually increments an internal count so that  if a script ends and <c>OnPlayerDisconnect</c> is called then <c>sscanf</c>  still knows that the player is really connected.  Also stores their name  internally.  </remarks> 
		</member>
		<member name="M:OnPlayerDeath" syntax="OnPlayerDeath(playerid, killerid, reason)">
			<attribute name="public"/>
			<stacksize value="8"/>
			<dependency name="DestroyDynamicObject"/>
			<dependency name="ForceClassSelection"/>
			<dependency name="GetPlayerLastDamager"/>
			<dependency name="PickupInfo"/>
			<dependency name="PickupInfo"/>
			<dependency name="PlayerInfo"/>
			<dependency name="PlayerInfo"/>
			<dependency name="SendClientMessage"/>
			<dependency name="SendDeathMessage"/>
			<dependency name="SetPlayerColor"/>
			<dependency name="SkillInfo"/>
			<dependency name="SkillInfo"/>
			<dependency name="deaths"/>
			<dependency name="false"/>
			<dependency name="is_carrying_bomb"/>
			<dependency name="is_picked_up"/>
			<dependency name="is_player_spawned"/>
			<dependency name="kills"/>
			<dependency name="picked_up_by_team"/>
			<dependency name="player_change_team"/>
			<dependency name="player_perk"/>
			<dependency name="skill_king_charges"/>
			<dependency name="true"/>
			<param name="playerid">
				The ID of the player that died
			</param>
			<param name="killerid">
				The ID of the player that killed the player who died, or <b><c>INVALID_PLAYER_ID</c></b> if there was none
			</param>
			<param name="reason">
				The ID of the <a href="http://wiki.sa-mp.com/wiki/Weapons">reason</a> for the player's death
			</param>
			<summary>This callback is called when a player dies, either by suicide or by being killed by another player.</summary>    <seealso name="OnPlayerSpawn"/> <seealso name="SendDeathMessage"/> <seealso name="SetPlayerHealth"/> <remarks> The reason will return 37 (flame thrower) from any fire sources (e.g. molotov, 18)<p/> The reason will return 51 from any weapon that creates an explosion (e.g. RPG, grenade)<p/> You do not need to check whether killerid is valid before using it in <a href="#SendDeathMessage">SendDeathMessage</a>. <b><c>INVALID_PLAYER_ID</c></b> is a valid killerid ID parameter in that function.<p/> <b>playerid</b> is the only one who can call the callback. (good to know for anti fake death) </remarks> <returns> <b><c>0</c></b> - Will prevent other filterscripts from receiving this callback.<p/> <b><c>1</c></b> - Indicates that this callback will be passed to the next filterscript.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerDisconnect" syntax="OnPlayerDisconnect(playerid, reason)">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="SSCANF_Leave"/>
			<dependency name="SSCANF_OnPlayerDisconnect"/>
			<dependency name="SSCANF_gInit"/>
			<param name="playerid">
				The ID of the player that disconnected
			</param>
			<param name="reason">
				The reason for the disconnection. See table below
			</param>
			<summary>This callback is called when a player disconnects from the server.</summary>   <seealso name="OnPlayerConnect"/> <seealso name="OnIncomingConnection"/> <seealso name="OnPlayerFinishedDownloading"/> <remarks>This callback can also be called by NPC.</remarks> <remarks>Some functions might not work correctly when used in this callback because the player is already disconnected when the callback is called. This means that you can't get unambiguous information from functions like <a href="#GetPlayerIp">GetPlayerIp</a> and <a href="#GetPlayerPos">GetPlayerPos</a>.</remarks> <remarks> <b>Reasons:</b><p/> <ul> <li><b><c>0</c></b> - timeout/Crash - the player's connection was lost. Either their game crashed or their network had a fault.</li> <li><b><c>1</c></b> - quit - the player purposefully quit, either using the <b><c>/quit (/q)</c></b> command or via the pause menu.</li> <li><b><c>2</c></b> - kick/ban - the player was kicked or banned by the server.</li> </ul> </remarks> <returns> <b><c>0</c></b> - Will prevent other filterscripts from receiving this callback.<p/> <b><c>1</c></b> - Indicates that this callback will be passed to the next filterscript.<p/> It is always called first in filterscripts. </returns><p/> <library>sscanf</library>  <remarks>  Called when a player disconnects, or when a script is ended.  </remarks> 
		</member>
		<member name="M:OnPlayerEditAttachedObject" syntax="OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ)">
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that ended edition mode
			</param>
			<param name="response">
				<b><c>0</c></b> if they cancelled (ESC) or <b><c>1</c></b> if they clicked the save icon
			</param>
			<param name="index">
				The index of the attached object
			</param>
			<param name="modelid">
				The model of the attached object that was edited
			</param>
			<param name="boneid">
				The bone of the attached object that was edited
			</param>
			<param name="fOffsetX">
				<paraminfo>Float </paraminfo>
				The X offset for the attached object that was edited
			</param>
			<param name="fOffsetY">
				<paraminfo>Float </paraminfo>
				The Y offset for the attached object that was edited
			</param>
			<param name="fOffsetZ">
				<paraminfo>Float </paraminfo>
				The Z offset for the attached object that was edited
			</param>
			<param name="fRotX">
				<paraminfo>Float </paraminfo>
				The X rotation for the attached object that was edited
			</param>
			<param name="fRotY">
				<paraminfo>Float </paraminfo>
				The Y rotation for the attached object that was edited
			</param>
			<param name="fRotZ">
				<paraminfo>Float </paraminfo>
				The Z rotation for the attached object that was edited
			</param>
			<param name="fScaleX">
				<paraminfo>Float </paraminfo>
				The X scale for the attached object that was edited
			</param>
			<param name="fScaleY">
				<paraminfo>Float </paraminfo>
				The Y scale for the attached object that was edited
			</param>
			<param name="fScaleZ">
				<paraminfo>Float </paraminfo>
				The Z scale for the attached object that was edited
			</param>
			<summary>This callback is called when a player ends attached object edition mode.</summary>               <seealso name="EditAttachedObject"/> <seealso name="SetPlayerAttachedObject"/> <remarks>This callback was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks> <remarks>Editions should be discarded if response was <b><c>0</c></b> (cancelled). This must be done by storing the offsets etc. in an array BEFORE using <a href="#EditAttachedObject">EditAttachedObject</a>.</remarks> <returns> <b><c>1</c></b> - Will prevent other scripts from receiving this callback.<p/> <b><c>0</c></b> - Indicates that this callback will be passed to the next script.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerEditDynamicObject" syntax="OnPlayerEditDynamicObject(playerid, objectid, response, x, y, z, rx, ry, rz)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="objectid">
			</param>
			<param name="response">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="rx">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="ry">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="rz">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:OnPlayerEditObject" syntax="OnPlayerEditObject(playerid, playerobject, objectid, response, fX, fY, fZ, fRotX, fRotY, fRotZ)">
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that edited an object
			</param>
			<param name="playerobject">
				<b><c>0</c></b> if it is a global object or <b><c>1</c></b> if it is a playerobject
			</param>
			<param name="objectid">
				The ID of the edited object
			</param>
			<param name="response">
				The type of response
			</param>
			<param name="fX">
				<paraminfo>Float </paraminfo>
				The X offset for the object that was edited
			</param>
			<param name="fY">
				<paraminfo>Float </paraminfo>
				The Y offset for the object that was edited
			</param>
			<param name="fZ">
				<paraminfo>Float </paraminfo>
				The Z offset for the object that was edited
			</param>
			<param name="fRotX">
				<paraminfo>Float </paraminfo>
				The X rotation for the object that was edited
			</param>
			<param name="fRotY">
				<paraminfo>Float </paraminfo>
				The Y rotation for the object that was edited
			</param>
			<param name="fRotZ">
				<paraminfo>Float </paraminfo>
				The Z rotation for the object that was edited
			</param>
			<summary>This callback is called when a player finishes editing an object (<a href="#EditObject">EditObject</a>/<a href="#EditPlayerObject">EditPlayerObject</a>).</summary>           <seealso name="EditObject"/> <seealso name="CreateObject"/> <seealso name="DestroyObject"/> <seealso name="MoveObject"/> <remarks>This callback was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks> <remarks>When using <b><c>EDIT_RESPONSE_UPDATE</c></b> be aware that this callback will not be called when releasing an edit in progress resulting in the last update of <b><c>EDIT_RESPONSE_UPDATE</c></b> being out of sync of the objects current position.</remarks> <returns> <b><c>1</c></b> - Will prevent other scripts from receiving this callback.<p/> <b><c>0</c></b> - Indicates that this callback will be passed to the next script.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerEnterCheckpoint" syntax="OnPlayerEnterCheckpoint(playerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The player who entered the checkpoint
			</param>
			<summary>This callback is called when a player enters the checkpoint set for that player.</summary>  <seealso name="OnPlayerLeaveCheckpoint"/> <seealso name="OnPlayerEnterRaceCheckpoint"/> <seealso name="OnPlayerLeaveRaceCheckpoint"/> <seealso name="SetPlayerCheckpoint"/> <seealso name="DisablePlayerCheckpoint"/> <seealso name="IsPlayerInCheckpoint"/> <seealso name="SetPlayerRaceCheckpoint"/> <seealso name="DisablePlayerRaceCheckpoint"/> <seealso name="IsPlayerInRaceCheckpoint"/> <remarks>This callback can also be called by NPC.</remarks> <returns> This callback does not handle returns.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerEnterDynamicArea" syntax="OnPlayerEnterDynamicArea(playerid, areaid)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="areaid">
			</param>
		</member>
		<member name="M:OnPlayerEnterDynamicCP" syntax="OnPlayerEnterDynamicCP(playerid, checkpointid)">
			<attribute name="public"/>
			<stacksize value="12"/>
			<dependency name="ApplyAnimation"/>
			<dependency name="CPInfo"/>
			<dependency name="CPInfo"/>
			<dependency name="GetPlayerTeam"/>
			<dependency name="PlayerInfo"/>
			<dependency name="PlayerInfo"/>
			<dependency name="SendClientMessage"/>
			<dependency name="SendClientMessageToAll"/>
			<dependency name="SetTimerEx"/>
			<dependency name="cp_bomb_timer"/>
			<dependency name="cp_defuse_timer"/>
			<dependency name="cp_player"/>
			<dependency name="cp_team"/>
			<dependency name="false"/>
			<dependency name="is_active"/>
			<dependency name="is_carrying_bomb"/>
			<dependency name="occupied"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
			<param name="checkpointid">
			</param>
		</member>
		<member name="M:OnPlayerEnterDynamicRaceCP" syntax="OnPlayerEnterDynamicRaceCP(playerid, checkpointid)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="checkpointid">
			</param>
		</member>
		<member name="M:OnPlayerEnterRaceCheckpoint" syntax="OnPlayerEnterRaceCheckpoint(playerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player who entered the race checkpoint
			</param>
			<summary>This callback is called when a player enters a race checkpoint.</summary>  <seealso name="OnPlayerEnterCheckpoint"/> <seealso name="OnPlayerLeaveCheckpoint"/> <seealso name="OnPlayerLeaveRaceCheckpoint"/> <seealso name="SetPlayerCheckpoint"/> <seealso name="DisablePlayerCheckpoint"/> <seealso name="IsPlayerInCheckpoint"/> <seealso name="SetPlayerRaceCheckpoint"/> <seealso name="DisablePlayerRaceCheckpoint"/> <seealso name="IsPlayerInRaceCheckpoint"/> <remarks>This callback can also be called by NPC.</remarks> <returns> This callback does not handle returns.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerEnterVehicle" syntax="OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				ID of the player who attempts to enter a vehicle
			</param>
			<param name="vehicleid">
				ID of the vehicle the player is attempting to enter
			</param>
			<param name="ispassenger">
				<b><c>0</c></b> if entering as driver. <b><c>1</c></b> if entering as passenger
			</param>
			<summary>This callback is called when a player <b><c>starts</c></b> to enter a vehicle, meaning the player is not in vehicle yet at the time this callback is called.</summary>    <seealso name="OnPlayerExitVehicle"/> <seealso name="OnPlayerStateChange"/> <seealso name="PutPlayerInVehicle"/> <seealso name="GetPlayerVehicleSeat"/> <remarks>This callback is called when a player <b>BEGINS</b> to enter a vehicle, not when they HAVE entered it. See <a href="#OnPlayerStateChange">OnPlayerStateChange</a>. </remarks> <remarks>This callback is still called if the player is denied entry to the vehicle (e.g. it is locked or full). </remarks> <returns> This callback does not handle returns.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerExitVehicle" syntax="OnPlayerExitVehicle(playerid, vehicleid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that is exiting a vehicle
			</param>
			<param name="vehicleid">
				The ID of the vehicle the player is exiting
			</param>
			<summary>This callback is called when a player <b>starts</b> to exit a vehicle.</summary>   <seealso name="OnPlayerEnterVehicle"/> <seealso name="OnPlayerStateChange"/> <seealso name="RemovePlayerFromVehicle"/> <seealso name="GetPlayerVehicleSeat"/> <remarks>Not called if the player falls off a bike or is removed from a vehicle by other means such as using <a href="#SetPlayerPos">SetPlayerPos</a>.</remarks> <remarks>You must use <a href="#OnPlayerStateChange">OnPlayerStateChange</a> and check if their old state is <b><c>PLAYER_STATE_DRIVER</c></b> or <b><c>PLAYER_STATE_PASSENGER</c></b> and their new state is <b><c>PLAYER_STATE_ONFOOT</c></b>.</remarks> <returns> This callback does not handle returns.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerExitedMenu" syntax="OnPlayerExitedMenu(playerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that exited the menu
			</param>
			<summary>Called when a player exits a menu.</summary>  <seealso name="OnPlayerSelectedMenuRow"/> <seealso name="CreateMenu"/> <seealso name="DestroyMenu"/> <returns> This callback does not handle returns.<p/> It is always called first in gamemode. </returns>
		</member>
		<member name="M:OnPlayerFinishedDownloading" syntax="OnPlayerFinishedDownloading(playerid, virtualworld)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that finished downloading custom models
			</param>
			<param name="virtualworld">
				The ID of the virtual world the player finished downloading custom models for
			</param>
			<summary>This callback is called when a player finishes downloading custom models. For more information on how to add custom models to your server, see <a href="http://forum.sa-mp.com/showthread.php?t=644105">the release thread</a> and <a href="http://forum.sa-mp.com/showthread.php?t=644123">this tutorial</a>.</summary>   <seealso name="OnPlayerConnect"/> <seealso name="OnPlayerDisconnect"/> <seealso name="OnIncomingConnection"/> <remarks>This callback was added in <b>SA-MP 0.3DL</b> and will not work in earlier versions!</remarks> <remarks>This callback is called every time a player changes virtual worlds, even if there are no custom models present in that world.</remarks> <returns>This callback does not handle returns.</returns>
		</member>
		<member name="M:OnPlayerGiveDamage" syntax="OnPlayerGiveDamage(playerid, damagedid, amount, weaponid, bodypart)">
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that gave damage
			</param>
			<param name="damagedid">
				The ID of the player that received damage
			</param>
			<param name="amount">
				<paraminfo>Float </paraminfo>
				The amount of health/armour damagedid has lost (combined)
			</param>
			<param name="weaponid">
				The <a href="http://wiki.sa-mp.com/wiki/Weapons">reason</a> that caused the damage
			</param>
			<param name="bodypart">
				The body part that was hit. (NOTE: This parameter was added in <b>0.3z</b>. Leave it out if using an older version!)
			</param>
			<summary>This callback is called when a player gives damage to another player.</summary>      <seealso name="OnPlayerTakeDamage"/> <remarks>This callback was added in <b>SA-MP 0.3d</b> and will not work in earlier versions!</remarks> <remarks> Keep in mind this function can be inaccurate in some cases.<p/> If you want to prevent certain players from damaging eachother, use <a href="#SetPlayerTeam">SetPlayerTeam</a>.<p/> The weaponid will return <b><c>37</c></b> (flame thrower) from any fire sources (e.g. molotov, 18)<p/> The weaponid will return <b><c>51</c></b> from any weapon that creates an explosion (e.g. RPG, grenade)<p/> <b>playerid</b> is the only one who can call the callback.<p/> The amount is always the maximum damage the weaponid can do, even when the health left is less than that maximum damage. So when a player has <b><c>100.0</c></b> health and gets shot with a Desert Eagle which has a damage value of <b><c>46.2</c></b>, it takes 3 shots to kill that player. All 3 shots will show an amount of <b><c>46.2</c></b>, even though when the last shot hits, the player only has <b><c>7.6</c></b> health left. </remarks> <returns> <b><c>1</c></b> - Callback will not be called in other filterscripts.<p/> <b><c>0</c></b> - Allows this callback to be called in other filterscripts.<p/> It is always called first in filterscripts so returning <b><c>1</c></b> there blocks other filterscripts from seeing it. </returns>
		</member>
		<member name="M:OnPlayerGiveDamageActor" syntax="OnPlayerGiveDamageActor(playerid, damaged_actorid, amount, weaponid, bodypart)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that gave damage
			</param>
			<param name="damaged_actorid">
				The ID of the actor that received damage
			</param>
			<param name="amount">
				<paraminfo>Float </paraminfo>
				The amount of health/armour damaged_actorid has lost
			</param>
			<param name="weaponid">
				The reason that caused the damage
			</param>
			<param name="bodypart">
				The body part that was hit
			</param>
			<summary>This callback is called when a player gives damage to an actor.</summary>      <seealso name="CreateActor"/> <seealso name="SetActorInvulnerable"/> <seealso name="SetActorHealth"/> <seealso name="GetActorHealth"/> <seealso name="IsActorInvulnerable"/> <seealso name="IsValidActor"/> <seealso name="OnActorStreamOut"/> <seealso name="OnPlayerStreamIn"/> <remarks>This callback was added in <b>SA-MP 0.3.7</b> and will not work in earlier versions!</remarks> <remarks>This function does not get called if the actor is set invulnerable (WHICH IS BY DEFAULT). See <a href="#SetActorInvulnerable">SetActorInvulnerable</a>.</remarks> <returns> <b><c>1</c></b> - Callback will not be called in other filterscripts.<p/> <b><c>0</c></b> - Allows this callback to be called in other filterscripts.<p/> It is always called first in filterscripts so returning <b><c>1</c></b> there blocks other filterscripts from seeing it. </returns>
		</member>
		<member name="M:OnPlayerGiveDamageDynamicActor" syntax="OnPlayerGiveDamageDynamicActor(playerid, actorid, amount, weaponid, bodypart)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="actorid">
			</param>
			<param name="amount">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="weaponid">
			</param>
			<param name="bodypart">
			</param>
		</member>
		<member name="M:OnPlayerInteriorChange" syntax="OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The playerid who changed interior
			</param>
			<param name="newinteriorid">
				The interior the player is now in
			</param>
			<param name="oldinteriorid">
				The interior the player was in before
			</param>
			<summary>Called when a player changes interior. Can be triggered by SetPlayerInterior or when a player enter/exits a building.</summary>    <seealso name="SetPlayerInterior"/> <seealso name="GetPlayerInterior"/> <seealso name="LinkVehicleToInterior"/> <seealso name="OnPlayerStateChange"/> <returns> This callback does not handle returns.<p/> It is always called first in gamemode. </returns>
		</member>
		<member name="M:OnPlayerKeyStateChange" syntax="OnPlayerKeyStateChange(playerid, newkeys, oldkeys)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that pressed or released a key
			</param>
			<param name="newkeys">
				A map (bitmask) of the keys currently held - see <a href="http://wiki.sa-mp.com/wiki/Keys">here</a>
			</param>
			<param name="oldkeys">
				A map (bitmask) of the keys held prior to the current change - see <a href="http://wiki.sa-mp.com/wiki/Keys">here</a>
			</param>
			<summary>This callback is called when the state of any supported key is changed (pressed/released). Directional keys do not trigger OnPlayerKeyStateChange (up/down/left/right).</summary>    <seealso name="GetPlayerKeys"/> <remarks>This callback can also be called by NPC.</remarks> <remarks> Useful macros:<p/> <code> // HOLDING(keys)<p/> #define HOLDING(%0) ((newkeys &amp; (%0)) == (%0))<p/> <p/> // PRESSED(keys)<p/> #define PRESSED(%0) (((newkeys &amp; (%0)) == (%0)) &amp;&amp; ((oldkeys &amp; (%0)) != (%0)))<p/> <p/> // PRESSING(keyVariable, keys)<p/> #define PRESSING(%0,%1) (%0 &amp; (%1))<p/> <p/> // RELEASED(keys)<p/> #define RELEASED(%0) (((newkeys &amp; (%0)) != (%0)) &amp;&amp; ((oldkeys &amp; (%0)) == (%0)))<p/> </code> </remarks> <returns> This callback does not handle returns.<p/> It is always called first in gamemode. </returns>
		</member>
		<member name="M:OnPlayerLeaveCheckpoint" syntax="OnPlayerLeaveCheckpoint(playerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that left their checkpoint
			</param>
			<summary>This callback is called when a player leaves the checkpoint set for them by <a href="#SetPlayerCheckpoint">SetPlayerCheckpoint</a>. Only one checkpoint can be set at a time.</summary>  <seealso name="OnPlayerEnterCheckpoint"/> <seealso name="OnPlayerEnterRaceCheckpoint"/> <seealso name="OnPlayerLeaveRaceCheckpoint"/> <seealso name="SetPlayerCheckpoint"/> <seealso name="DisablePlayerCheckpoint"/> <seealso name="IsPlayerInCheckpoint"/> <seealso name="SetPlayerRaceCheckpoint"/> <seealso name="DisablePlayerRaceCheckpoint"/> <seealso name="IsPlayerInRaceCheckpoint"/> <remarks>This callback can also be called by NPC.</remarks> <returns> This callback does not handle returns.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerLeaveDynamicArea" syntax="OnPlayerLeaveDynamicArea(playerid, areaid)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="areaid">
			</param>
		</member>
		<member name="M:OnPlayerLeaveDynamicCP" syntax="OnPlayerLeaveDynamicCP(playerid, checkpointid)">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="CPInfo"/>
			<dependency name="CPInfo"/>
			<dependency name="KillTimer"/>
			<dependency name="SendClientMessage"/>
			<dependency name="cp_defuse_timer"/>
			<dependency name="cp_player"/>
			<dependency name="false"/>
			<dependency name="occupied"/>
			<param name="playerid">
			</param>
			<param name="checkpointid">
			</param>
		</member>
		<member name="M:OnPlayerLeaveDynamicRaceCP" syntax="OnPlayerLeaveDynamicRaceCP(playerid, checkpointid)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="checkpointid">
			</param>
		</member>
		<member name="M:OnPlayerLeaveRaceCheckpoint" syntax="OnPlayerLeaveRaceCheckpoint(playerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that left the race checkpoint
			</param>
			<summary>This callback is called when a player leaves the race checkpoint.</summary>  <seealso name="OnPlayerEnterCheckpoint"/> <seealso name="OnPlayerLeaveCheckpoint"/> <seealso name="OnPlayerEnterRaceCheckpoint"/> <seealso name="SetPlayerCheckpoint"/> <seealso name="DisablePlayerCheckpoint"/> <seealso name="IsPlayerInCheckpoint"/> <seealso name="SetPlayerRaceCheckpoint"/> <seealso name="DisablePlayerRaceCheckpoint"/> <seealso name="IsPlayerInRaceCheckpoint"/> <remarks>This callback can also be called by NPC.</remarks> <returns> This callback does not handle returns.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerObjectMoved" syntax="OnPlayerObjectMoved(playerid, objectid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The playerid the object is assigned to
			</param>
			<param name="objectid">
				The ID of the player object that was moved
			</param>
			<summary>This callback is called when a player object is moved after <a href="#MovePlayerObject">MovePlayerObject</a> (when it stops moving).</summary>   <seealso name="OnObjectMoved"/> <seealso name="MovePlayerObject"/> <seealso name="IsPlayerObjectMoving"/> <seealso name="StopPlayerObject"/> <remarks>This callback can also be called for NPC.</remarks> <returns> This callback does not handle returns.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerPickUpDynamicPickup" syntax="OnPlayerPickUpDynamicPickup(playerid, pickupid)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="pickupid">
			</param>
		</member>
		<member name="M:OnPlayerPickUpPickup" syntax="OnPlayerPickUpPickup(playerid, pickupid)">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="PickupInfo"/>
			<dependency name="PickupInfo"/>
			<dependency name="PlayerInfo"/>
			<dependency name="PlayerInfo"/>
			<dependency name="SendClientMessage"/>
			<dependency name="false"/>
			<dependency name="is_carrying_bomb"/>
			<dependency name="is_picked_up"/>
			<dependency name="true"/>
			<param name="playerid">
				The ID of the player that picked up the pickup
			</param>
			<param name="pickupid">
				The ID of the pickup, returned by CreatePickup
			</param>
			<summary>Called when a player picks up a pickup created with <a href="#CreatePickup">CreatePickup</a>.</summary>   <seealso name="CreatePickup"/> <seealso name="DestroyPickup"/> <returns> This callback does not handle returns.<p/> It is always called first in gamemode. </returns>
		</member>
		<member name="M:OnPlayerRequestClass" syntax="OnPlayerRequestClass(playerid, classid)">
			<attribute name="public"/>
			<stacksize value="13"/>
			<dependency name="operator+(Float:,_:)"/>
			<dependency name="operator*(Float:,_:)"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="Float:operator=(_:)"/>
			<dependency name="ApplyAnimation"/>
			<dependency name="ClassInfo"/>
			<dependency name="ClassInfo"/>
			<dependency name="CreatePlayerTextDraw"/>
			<dependency name="InterpolateCameraLookAt"/>
			<dependency name="InterpolateCameraPos"/>
			<dependency name="PlayerInfo"/>
			<dependency name="PlayerInfo"/>
			<dependency name="PlayerTextDrawAlignment"/>
			<dependency name="PlayerTextDrawDestroy"/>
			<dependency name="PlayerTextDrawFont"/>
			<dependency name="PlayerTextDrawShow"/>
			<dependency name="RemovePlayerMapIcon"/>
			<dependency name="SetPlayerCameraLookAt"/>
			<dependency name="SetPlayerCameraPos"/>
			<dependency name="SetPlayerFacingAngle"/>
			<dependency name="SetPlayerPos"/>
			<dependency name="a"/>
			<dependency name="current_textdraw"/>
			<dependency name="degrees"/>
			<dependency name="false"/>
			<dependency name="floatcos"/>
			<dependency name="floatsin"/>
			<dependency name="title"/>
			<dependency name="true"/>
			<dependency name="x"/>
			<dependency name="y"/>
			<dependency name="z"/>
			<param name="playerid">
				The ID of the player that changed class
			</param>
			<param name="classid">
				The ID of the current class being viewed (returned by <a href="#AddPlayerClass">AddPlayerClass</a>)
			</param>
			<summary>Called when a player changes class at class selection (and when class selection first appears).</summary>   <seealso name="OnPlayerRequestSpawn"/> <seealso name="AddPlayerClass"/> <remarks>This callback can also be called by NPC.</remarks> <remarks>This callback is also called when a player presses <b>F4</b>.</remarks> <returns> Returning <b><c>0</c></b> in this callback will prevent the player from spawning. The player can be forced to spawn when <a href="#SpawnPlayer">SpawnPlayer</a> is used.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerRequestDownload" syntax="OnPlayerRequestDownload(playerid, type, crc)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="type">
			</param>
			<param name="crc">
			</param>
		</member>
		<member name="M:OnPlayerRequestSpawn" syntax="OnPlayerRequestSpawn(playerid)">
			<attribute name="public"/>
			<stacksize value="4"/>
			<dependency name="ForcePerkSelection"/>
			<param name="playerid">
				The ID of the player that requested to spawn
			</param>
			<summary>Called when a player attempts to spawn via class selection either by pressing SHIFT or clicking the 'Spawn' button.</summary>  <seealso name="OnPlayerSpawn"/> <seealso name="OnPlayerRequestClass"/> <remarks>This callback can also be called by NPC.</remarks> <remarks>To prevent players from spawning with certain classes, the last viewed class must be saved in a variable in <a href="#OnPlayerRequestClass">OnPlayerRequestClass</a>.</remarks> <returns> Returning <b><c>0</c></b> in this callback will prevent the player from spawning.<p/> It is always called first in filterscripts so returning <b><c>0</c></b> there also blocks other scripts from seeing it. </returns>
		</member>
		<member name="M:OnPlayerSelectDynamicObject" syntax="OnPlayerSelectDynamicObject(playerid, objectid, modelid, x, y, z)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="objectid">
			</param>
			<param name="modelid">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:OnPlayerSelectObject" syntax="OnPlayerSelectObject(playerid, type, objectid, modelid, fX, fY, fZ)">
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that selected an object
			</param>
			<param name="type">
				The type of selection
			</param>
			<param name="objectid">
				The ID of the selected object
			</param>
			<param name="modelid">
				The model ID of the selected object
			</param>
			<param name="fX">
				<paraminfo>Float </paraminfo>
				The X position of the selected object
			</param>
			<param name="fY">
				<paraminfo>Float </paraminfo>
				The Y position of the selected object
			</param>
			<param name="fZ">
				<paraminfo>Float </paraminfo>
				The Z position of the selected object
			</param>
			<summary>This callback is called when a player selects an object after <a href="#SelectObject">SelectObject</a> has been used.</summary>        <seealso name="SelectObject"/> <remarks>This function was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks> <returns> <b><c>1</c></b> - Will prevent other scripts from receiving this callback.<p/> <b><c>0</c></b> - Indicates that this callback will be passed to the next script.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerSelectedMenuRow" syntax="OnPlayerSelectedMenuRow(playerid, row)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that selected a menu item
			</param>
			<param name="row">
				The ID of the row that was selected. The first row is ID <b><c>0</c></b>
			</param>
			<summary>This callback is called when a player selects an item from a menu (<a href="#ShowMenuForPlayer">ShowMenuForPlayer</a>).</summary>   <seealso name="OnPlayerExitedMenu"/> <seealso name="OnDialogResponse"/> <seealso name="CreateMenu"/> <seealso name="DestroyMenu"/> <seealso name="AddMenuItem"/> <seealso name="ShowMenuForPlayer"/> <seealso name="HideMenuForPlayer"/> <remarks>The menu ID is not passed to this callback. <a href="#GetPlayerMenu">GetPlayerMenu</a> must be used to determine which menu the player selected an item on.</remarks> <returns> This callback does not handle returns.<p/> It is always called first in gamemode. </returns>
		</member>
		<member name="M:OnPlayerShootDynamicObject" syntax="OnPlayerShootDynamicObject(playerid, weaponid, objectid, x, y, z)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="weaponid">
			</param>
			<param name="objectid">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:OnPlayerSpawn" syntax="OnPlayerSpawn(playerid)">
			<attribute name="public"/>
			<stacksize value="22"/>
			<dependency name="Float:operator=(_:)"/>
			<dependency name="AttachDynamicObjectToPlayer"/>
			<dependency name="ClassInfo"/>
			<dependency name="ClassInfo"/>
			<dependency name="CreateDynamicObject"/>
			<dependency name="GetPlayerTeam"/>
			<dependency name="GivePlayerWeapon"/>
			<dependency name="PerkInfo"/>
			<dependency name="PerkInfo"/>
			<dependency name="PlayerInfo"/>
			<dependency name="PlayerInfo"/>
			<dependency name="PlayerTextDrawDestroy"/>
			<dependency name="SetPlayerArmour"/>
			<dependency name="SetPlayerColor"/>
			<dependency name="SetPlayerHealth"/>
			<dependency name="SetPlayerInterior"/>
			<dependency name="SkillInfo"/>
			<dependency name="SkillInfo"/>
			<dependency name="Skill_KingCharges"/>
			<dependency name="Skill_KingCharges"/>
			<dependency name="color"/>
			<dependency name="current_textdraw"/>
			<dependency name="is_player_spawned"/>
			<dependency name="perk_armour"/>
			<dependency name="perk_health"/>
			<dependency name="perk_weapon_ammo"/>
			<dependency name="perk_weapons"/>
			<dependency name="player_perk"/>
			<dependency name="skill_king_charges"/>
			<dependency name="true"/>
			<param name="playerid">
				The ID of the player that spawned
			</param>
			<summary>This callback is called when a player spawns.(i.e. after caling <a href="#SpawnPlayer">SpawnPlayer</a> function).</summary>  <seealso name="OnPlayerDeath"/> <seealso name="OnVehicleSpawn"/> <seealso name="SpawnPlayer"/> <seealso name="AddPlayerClass"/> <seealso name="SetSpawnInfo"/> <remarks>This callback can also be called by NPC.</remarks> <remarks>The game sometimes deducts $100 from players after spawn.</remarks> <returns> <b><c>0</c></b> - Will prevent other filterscripts from receiving this callback.<p/> <b><c>1</c></b> - Indicates that this callback will be passed to the next filterscript.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerStateChange" syntax="OnPlayerStateChange(playerid, newstate, oldstate)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that changed state
			</param>
			<param name="newstate">
				The player's new state
			</param>
			<param name="oldstate">
				The player's previous state
			</param>
			<summary>This callback is called when a player changes state. For example, when a player changes from being the driver of a vehicle to being on-foot.</summary>    <seealso name="OnPlayerInteriorChange"/> <seealso name="GetPlayerState"/> <seealso name="GetPlayerSpecialAction"/> <seealso name="SetPlayerSpecialAction"/> <remarks>This callback can also be called by NPC.</remarks> <remarks> <b>States:</b><p/> <ul> <li><b><c>PLAYER_STATE_NONE</c></b> - empty (while initializing)</li> <li><b><c>PLAYER_STATE_ONFOOT</c></b> - player is on foot</li> <li><b><c>PLAYER_STATE_DRIVER</c></b> - player is the driver of a vehicle</li> <li><b><c>PLAYER_STATE_PASSENGER</c></b> - player is passenger of a vehicle</li> <li><b><c>PLAYER_STATE_WASTED</c></b> - player is dead or on class selection</li> <li><b><c>PLAYER_STATE_SPAWNED</c></b> - player is spawned</li> <li><b><c>PLAYER_STATE_SPECTATING</c></b> - player is spectating</li> <li><b><c>PLAYER_STATE_EXIT_VEHICLE</c></b> - player exits a vehicle</li> <li><b><c>PLAYER_STATE_ENTER_VEHICLE_DRIVER</c></b> - player enters a vehicle as driver</li> <li><b><c>PLAYER_STATE_ENTER_VEHICLE_PASSENGER</c></b> - player enters a vehicle as passenger </li> </ul> </remarks> <returns> This callback does not handle returns.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerStreamIn" syntax="OnPlayerStreamIn(playerid, forplayerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player who has been streamed
			</param>
			<param name="forplayerid">
				The ID of the player that streamed the other player in
			</param>
			<summary>This callback is called when a player is streamed by some other player's client.</summary>   <seealso name="OnPlayerStreamOut"/> <seealso name="OnActorStreamIn"/> <seealso name="OnVehicleStreamIn"/> <remarks>This callback was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <remarks>This callback can also be called by NPC.</remarks> <returns> This callback does not handle returns.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerStreamOut" syntax="OnPlayerStreamOut(playerid, forplayerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The player who has been destreamed
			</param>
			<param name="forplayerid">
				The player who has destreamed the other player
			</param>
			<summary>This callback is called when a player is streamed out from some other player's client.</summary>   <seealso name="OnPlayerStreamIn"/> <seealso name="OnActorStreamOut"/> <seealso name="OnVehicleStreamOut"/> <remarks>This callback was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <remarks>This callback can also be called by NPC.</remarks> <returns> This callback does not handle returns.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerTakeDamage" syntax="OnPlayerTakeDamage(playerid, issuerid, amount, weaponid, bodypart)">
			<attribute name="public"/>
			<stacksize value="25"/>
			<dependency name="operator+(Float:,_:)"/>
			<dependency name="operator*(Float:,_:)"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator/(Float:,Float:)"/>
			<dependency name="Float:operator=(_:)"/>
			<dependency name="CreateDynamicObject"/>
			<dependency name="DestroyDynamicObject"/>
			<dependency name="GetPlayerPos"/>
			<dependency name="MoveDynamicObject"/>
			<dependency name="PlayerInfo"/>
			<dependency name="SetPlayerHealth"/>
			<dependency name="SetPlayerLastDamager"/>
			<dependency name="SetTimerEx"/>
			<dependency name="SkillInfo"/>
			<dependency name="SkillInfo"/>
			<dependency name="Skill_KingCharges"/>
			<dependency name="false"/>
			<dependency name="floatpower"/>
			<dependency name="floatround"/>
			<dependency name="floatsqroot"/>
			<dependency name="player_perk"/>
			<dependency name="skill_king_charges"/>
			<param name="playerid">
				The ID of the player that took damage
			</param>
			<param name="issuerid">
				The ID of the player that caused the damage. <b><c>INVALID_PLAYER_ID</c></b> if self-inflicted
			</param>
			<param name="amount">
				<paraminfo>Float </paraminfo>
				The amount of damage the player took (health and armour combined)
			</param>
			<param name="weaponid">
				The ID of the <a href="http://wiki.sa-mp.com/wiki/Weapons">weapon/reason</a> for the damage
			</param>
			<param name="bodypart">
				The body part that was hit. (NOTE: This parameter was added in <b>0.3z</b>. Leave it out if using an older version!)
			</param>
			<summary>This callback is called when a player takes damage.</summary>      <seealso name="OnPlayerGiveDamage"/> <seealso name="OnPlayerWeaponShot"/> <remarks>This callback was added in <b>SA-MP 0.3d</b> and will not work in earlier versions!</remarks> <remarks><a href="#GetPlayerHealth">GetPlayerHealth</a> and <a href="#GetPlayerArmour">GetPlayerArmour</a> will return the old amounts of the player before this callback. </remarks> <remarks> The weaponid will return <b><c>37</c></b> (flame thrower) from any fire sources (e.g. molotov, <b><c>18</c></b>).<p/> The weaponid will return <b><c>51</c></b> from any weapon that creates an explosion (e.g. RPG, grenade)<p/> <b>playerid</b> is the only one who can call the callback.<p/> The amount is always the maximum damage the weaponid can do, even when the health left is less than that maximum damage. So when a player has <b><c>100.0</c></b> health and gets shot with a Desert Eagle which has a damage value of <b><c>46.2</c></b>, it takes 3 shots to kill that player. All 3 shots will show an amount of <b><c>46.2</c></b>, even though when the last shot hits, the player only has <b><c>7.6</c></b> health left. </remarks> <returns> <b><c>1</c></b> - Callback will not be called in other filterscripts.<p/> <b><c>0</c></b> - Allows this callback to be called in other filterscripts.<p/> It is always called first in filterscripts so returning <b><c>1</c></b> there blocks other filterscripts from seeing it. </returns>
		</member>
		<member name="M:OnPlayerText" syntax="OnPlayerText(playerid, text[])">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player who typed the text
			</param>
			<param name="text">
				<paraminfo> [] </paraminfo>
				The text the player typed
			</param>
			<summary>Called when a player sends a chat message.</summary>   <seealso name="OnPlayerCommandText"/> <seealso name="SendPlayerMessageToPlayer"/> <seealso name="SendPlayerMessageToAll"/> <remarks>This callback can also be called by NPC.</remarks> <returns> Returning <b><c>0</c></b> in this callback will stop the text from being sent to all players.<p/> It is always called first in filterscripts so returning <b><c>0</c></b> there blocks other scripts from seeing it. </returns>
		</member>
		<member name="M:OnPlayerUpdate" syntax="OnPlayerUpdate(playerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				ID of the player sending an update packet
			</param>
			<summary>This callback is called every time a client/player updates the server with their status. It is often used to create custom callbacks for client updates that aren't actively tracked by the server, such as health or armor updates or players switching weapons.</summary>  <remarks>This callback can also be called by NPC.</remarks> <remarks>This callback is called, on average, 30 times per second, per player; only use it when you know what it's meant for (or more importantly what it's NOT meant for). </remarks> <remarks>The frequency with which this callback is called for each player varies, depending on what the player is doing. Driving or shooting will trigger a lot more updates than idling. </remarks> <returns> <b><c>0</c></b> - Update from this player will not be replicated to other clients.<p/> <b><c>1</c></b> - Indicates that this update can be processed normally and sent to other players.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerWeaponShot" syntax="OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, fX, fY, fZ)">
			<attribute name="public"/>
			<stacksize value="22"/>
			<dependency name="operator!=(Float:,_:)"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator/(Float:,Float:)"/>
			<dependency name="operator*(Float:,Float:)"/>
			<dependency name="Float:operator=(_:)"/>
			<dependency name="CreateExplosion"/>
			<dependency name="GetPlayerDrunkLevel"/>
			<dependency name="GetPlayerLastShotVectors"/>
			<dependency name="GetPlayerPos"/>
			<dependency name="GetPlayerVelocity"/>
			<dependency name="GetVehiclePos"/>
			<dependency name="GetVehicleVelocity"/>
			<dependency name="IsVehicleOccupied"/>
			<dependency name="PlayerInfo"/>
			<dependency name="PlayerInfo"/>
			<dependency name="SetPlayerDrunkLevel"/>
			<dependency name="SetPlayerVelocity"/>
			<dependency name="SetTimerEx"/>
			<dependency name="SetVehicleAngularVelocity"/>
			<dependency name="SetVehicleVelocity"/>
			<dependency name="false"/>
			<dependency name="floatabs"/>
			<dependency name="floatpower"/>
			<dependency name="floatsqroot"/>
			<dependency name="player_drunk_timer"/>
			<param name="playerid">
				The ID of the player that shot a weapon
			</param>
			<param name="weaponid">
				The ID of the <a href="http://wiki.sa-mp.com/wiki/Weapons">weapon</a> shot by the player
			</param>
			<param name="hittype">
				The type of thing the shot hit (none, player, vehicle, or (player)object)
			</param>
			<param name="hitid">
				The ID of the player, vehicle or object that was hit
			</param>
			<param name="fX">
				<paraminfo>Float </paraminfo>
				The X coordinate that the shot hit
			</param>
			<param name="fY">
				<paraminfo>Float </paraminfo>
				The Y coordinate that the shot hit
			</param>
			<param name="fZ">
				<paraminfo>Float </paraminfo>
				The Z coordinate that the shot hit
			</param>
			<summary>This callback is called when a player fires a shot from a weapon. Only bullet weapons are supported. Only <b>passenger</b> drive-by is supported (not driver drive-by, and not sea sparrow / hunter shots).</summary>        <seealso name="OnPlayerGiveDamage"/> <seealso name="GetPlayerLastShotVectors"/> <remarks>This callback was added in <b>SA-MP 0.3z</b> and will not work in earlier versions!</remarks> <remarks> <li><b><c>BULLET_HIT_TYPE_NONE(0)</c></b></li> <li><b><c>BULLET_HIT_TYPE_PLAYER(1)</c></b></li> <li><b><c>BULLET_HIT_TYPE_VEHICLE(2)</c></b></li> <li><b><c>BULLET_HIT_TYPE_OBJECT(3)</c></b></li> <li><b><c>BULLET_HIT_TYPE_PLAYER_OBJECT(4)</c></b></li> </remarks> <remarks><b><c>BULLET_HIT_TYPE_PLAYER</c></b> is also called for NPCs. Actors are ignored by this callback and detects as <b><c>BULLET_HIT_TYPE_NONE</c></b>.</remarks> <remarks>This callback is only called when lag compensation is <b>enabled</b>. </remarks> <remarks> If hittype is:<p/> <ul> <li>- <b><c>BULLET_HIT_TYPE_NONE</c></b>: the fX, fY and fZ parameters are normal coordinates, will give 0.0 for coordinates if nothing was hit (e.g. far object that the bullet can't reach);</li> <li>- Others: the fX, fY and fZ are offsets relative to the hitid.</li> </ul> </remarks> <remarks> Isn't called if you fired in vehicle as driver or if you are looking behind with the aim enabled (shooting in air).<p/> It is called as <b><c>BULLET_HIT_TYPE_VEHICLE</c></b> with the correct hitid (the hit player's vehicleid) if you are shooting a player which is in a vehicle. It won't be called as <b><c>BULLET_HIT_TYPE_PLAYER</c></b> at all.<p/> <b>Partially fixed in SA-MP 0.3.7:</b> If fake weapon data is sent by a malicious user, other player clients may freeze or crash. To combat this, check if the reported weaponid can actually fire bullets. </remarks> <remarks> </remarks> <remarks><a href="#GetPlayerLastShotVectors">GetPlayerLastShotVectors</a> can be used in this callback for more detailed bullet vector information.</remarks> <returns> <b><c>0</c></b> - Prevent the bullet from causing damage.<p/> <b><c>1</c></b> - Allow the bullet to cause damage.<p/> It is always called first in filterscripts so returning <b><c>0</c></b> there also blocks other scripts from seeing it. </returns>
		</member>
		<member name="M:OnRconCommand" syntax="OnRconCommand(cmd[])">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="cmd">
				<paraminfo> [] </paraminfo>
				A string containing the command that was typed, as well as any passed parameters
			</param>
			<summary>This callback is called when a command is sent through the server console, remote RCON, or via the in-game "/rcon command".</summary>  <seealso name="IsPlayerAdmin"/> <seealso name="OnRconLoginAttempt"/> <remarks>You will need to include this callback in a loaded filterscript for it to work in the gamemode!</remarks> <remarks>"/rcon" is not included in "cmd" when a player types a command. </remarks> <remarks>If you use the <a href="#print">print</a> function here, it will send a message to the player who typed the command in-game as well as the log.</remarks> <remarks>This callback is not called when the player is not logged in as RCON admin. </remarks> <remarks>When the player is not logged in as RCON admin and uses <b>/rcon login</b>, this callback will not be called and <a href="#OnRconLoginAttempt">OnRconLoginAttempt</a> is called instead. However, when the player is logged in as RCON admin, the use of this command will call this callback. </remarks> <returns> <b><c>0</c></b> if the command was not processed, it will be passed to another script or <b><c>1</c></b> if the command was processed, will not be passed to other scripts.<p/> It is always called first in filterscripts so returning <b><c>1</c></b> there blocks gamemode from seeing it. </returns>
		</member>
		<member name="M:OnRconLoginAttempt" syntax="OnRconLoginAttempt(ip[], password[], success)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="ip">
				<paraminfo> [] </paraminfo>
				The IP of the player that tried to log in to RCON
			</param>
			<param name="password">
				<paraminfo> [] </paraminfo>
				The password used to login with
			</param>
			<param name="success">
				<b><c>0</c></b> if the password was incorrect or <b><c>1</c></b> if it was correct
			</param>
			<summary>This callback is called when someone attempts to log in to RCON in-game; successful or not.</summary>    <seealso name="OnRconCommand"/> <seealso name="IsPlayerAdmin"/> <seealso name="SendRconCommand"/> <remarks>This callback was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <remarks>This callback is only called when /rcon login is used in-game. </remarks> <remarks>This callback is only called when the player is not yet logged in. When the player is logged in, <a href="#OnRconCommand">OnRconCommand</a> is called instead.</remarks> <returns> This callback does not handle returns.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnScriptCash" syntax="OnScriptCash(playerid, amount, source)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player who got cash from the game
			</param>
			<param name="amount">
				The amount of cash given
			</param>
			<param name="source">
				Where the money came from
			</param>
			<summary>This callback is called when a SendClientCheck request comletes</summary>    <remarks>Doesn't work</remarks>
		</member>
		<member name="M:OnScriptInit" syntax="OnScriptInit()">
			<attribute name="public"/>
			<stacksize value="3"/>
			<dependency name="SSCANF_OnScriptInit"/>
			<dependency name="SSCANF_RunInit"/>
			<dependency name="SSCANF_gInit"/>
			<library>sscanf</library>  <remarks>  Called for earlier initialisation by YSI.  </remarks> 
		</member>
		<member name="M:OnTrailerUpdate" syntax="OnTrailerUpdate(playerid, vehicleid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player who sent a trailer update
			</param>
			<param name="vehicleid">
				The Trailer being updated
			</param>
			<summary>This callback is called when a player sent a trailer update.</summary>   <seealso name="OnUnoccupiedVehicleUpdate"/> <seealso name="GetVehicleTrailer"/> <seealso name="IsTrailerAttachedToVehicle"/> <seealso name="AttachTrailerToVehicle"/> <seealso name="DetachTrailerFromVehicle"/> <remarks>This callback was added in <b>SA-MP 0.3z R4</b> and will not work in earlier versions!</remarks> <remarks>This callback is called very frequently per second per trailer. You should refrain from implementing intensive calculations or intensive file writing/reading operations in this callback. </remarks> <returns> <b><c>0</c></b> - Cancels any trailer updates from being sent to other players. Update is still sent to the updating player.<p/> <b><c>1</c></b> - Processes the trailer update as normal and synchronizes it between all players.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnUnoccupiedVehicleUpdate" syntax="OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, new_x, new_y, new_z, vel_x, vel_y, vel_z)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="vehicleid">
				The ID of the vehicle that's position was updated
			</param>
			<param name="playerid">
				The ID of the player that sent a vehicle position sync update
			</param>
			<param name="passenger_seat">
				The ID of the seat if the player is a passenger. 0=not in vehicle, 1=front passenger, 2=backleft 3=backright 4+ is for coach/bus etc. with many passenger seats
			</param>
			<param name="new_x">
				<paraminfo>Float </paraminfo>
				The new X coordinate of the vehicle. This parameter was added in <b>0.3z</b>. Leave it out if using an earlier version
			</param>
			<param name="new_y">
				<paraminfo>Float </paraminfo>
				The new Y coordinate of the vehicle. This parameter was added in <b>0.3z</b>. Leave it out if using an earlier version
			</param>
			<param name="new_z">
				<paraminfo>Float </paraminfo>
				The new Z coordinate of the vehicle. This parameter was added in <b>0.3z</b>. Leave it out if using an earlier version
			</param>
			<param name="vel_x">
				<paraminfo>Float </paraminfo>
				The new X velocity of the vehicle. This parameter was added in <b>0.3z R4</b>. Leave it out if using an earlier version
			</param>
			<param name="vel_y">
				<paraminfo>Float </paraminfo>
				The new Y velocity of the vehicle. This parameter was added in <b>0.3z R4</b>. Leave it out if using an earlier version
			</param>
			<param name="vel_z">
				<paraminfo>Float </paraminfo>
				The new Z velocity of the vehicle. This parameter was added in <b>0.3z R4</b>. Leave it out if using an earlier version
			</param>
			<summary>This callback is called when a player's client updates/syncs the position of a vehicle they're not driving. This can happen outside of the vehicle or when the player is a passenger of a vehicle that has no driver.</summary>          <seealso name="OnTrailerUpdate"/> <remarks>This callback was added in <b>SA-MP 0.3c R3</b> and will not work in earlier versions!</remarks> <remarks>This callback is called very frequently per second per unoccupied vehicle. You should refrain from implementing intensive calculations or intensive file writing/reading operations in this callback.</remarks> <remarks><a href="#GetVehiclePos">GetVehiclePos</a> will return the old coordinates of the vehicle before this update.</remarks> <returns> Returning <b><c>0</c></b> in this callback will stop the vehicle's position being synced to other players. Update is still sent to the updating player. Useful for combating vehicle teleport hacks.<p/> It is always called first in filterscripts so returning <b><c>0</c></b> there also blocks other scripts from seeing it. </returns>
		</member>
		<member name="M:OnVehicleDamageStatusUpdate" syntax="OnVehicleDamageStatusUpdate(vehicleid, playerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="vehicleid">
				The ID of the vehicle that was changed its damage status
			</param>
			<param name="playerid">
				The ID of the player who synced the change in the damage status (who had the car damaged or repaired)
			</param>
			<summary>This callback is called when a vehicle element such as doors, tires, panels, or lights change their damage status.</summary>   <seealso name="GetVehicleDamageStatus"/> <seealso name="UpdateVehicleDamageStatus"/> <remarks>This callback was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <remarks>This does not include vehicle health changes</remarks> <returns> <b><c>1</c></b> - Will prevent other filterscripts from receiving this callback.<p/> <b><c>0</c></b> - Indicates that this callback will be passed to the next filterscript.<p/> It is always called first in filterscripts.<p/> </returns>
		</member>
		<member name="M:OnVehicleDeath" syntax="OnVehicleDeath(vehicleid, killerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="vehicleid">
				The ID of the vehicle that was destroyed
			</param>
			<param name="killerid">
				The ID of the player that reported (synced) the vehicle's destruction (name is misleading). Generally the driver or a passenger (if any) or the closest player
			</param>
			<summary>This callback is called when a vehicle is destroyed - either by exploding or becoming submerged in water.</summary>   <seealso name="OnVehicleSpawn"/> <seealso name="SetVehicleHealth"/> <remarks>This callback can also be called by NPC.</remarks> <remarks>This callback will also be called when a vehicle enters water, but the vehicle can be saved from destruction by teleportation or driving out (if only partially submerged). The callback won't be called a second time, and the vehicle may disappear when the driver exits, or after a short time.</remarks> <returns> This callback does not handle returns.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnVehicleMod" syntax="OnVehicleMod(playerid, vehicleid, componentid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the driver of the vehicle
			</param>
			<param name="vehicleid">
				The ID of the vehicle which is modded
			</param>
			<param name="componentid">
				The ID of the component which was added to the vehicle
			</param>
			<summary>This callback is called when a vehicle is modded.</summary>    <seealso name="AddVehicleComponent"/> <seealso name="OnEnterExitModShop"/> <seealso name="OnVehiclePaintjob"/> <seealso name="OnVehicleRespray"/> <remarks>This callback is NOT called by <a href="#AddVehicleComponent">AddVehicleComponent</a>.</remarks> <returns> Return <b><c>0</c></b> to desync the mod (or an invalid mod) from propagating and / or crashing players.<p/> It is always called first in gamemode so returning <b><c>0</c></b> there also blocks other filterscripts from seeing it. </returns>
		</member>
		<member name="M:OnVehiclePaintjob" syntax="OnVehiclePaintjob(playerid, vehicleid, paintjobid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that changed the paintjob of their vehicle
			</param>
			<param name="vehicleid">
				The ID of the vehicle that had its paintjob changed
			</param>
			<param name="paintjobid">
				The ID of the new paintjob
			</param>
			<summary>Called when a player previews a vehicle paintjob inside a mod shop. Watch out, this callback is not called when the player buys the paintjob.</summary>    <seealso name="ChangeVehiclePaintjob"/> <seealso name="ChangeVehicleColor"/> <seealso name="OnVehicleRespray"/> <seealso name="OnVehicleMod"/> <remarks>This callback is not called by <a href="#ChangeVehiclePaintjob">ChangeVehiclePaintjob</a>.</remarks> <returns> This callback does not handle returns. Returning <b><c>0</c></b> won't deny the paintjob change.<p/> It is always called first in gamemode so returning <b><c>0</c></b> there blocks other filterscripts from seeing it. </returns>
		</member>
		<member name="M:OnVehicleRespray" syntax="OnVehicleRespray(playerid, vehicleid, color1, color2)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that is driving the vehicle
			</param>
			<param name="vehicleid">
				The ID of the vehicle that was resprayed
			</param>
			<param name="color1">
				The color that the vehicle's primary color was changed to
			</param>
			<param name="color2">
				The color that the vehicle's secondary color was changed to
			</param>
			<summary>This callback is called when a player exits a mod shop, even if the colors weren't changed. Watch out, the name is ambiguous, Pay 'n' Spray shops don't call this callback.</summary>     <seealso name="ChangeVehicleColor"/> <seealso name="ChangeVehiclePaintjob"/> <seealso name="OnVehiclePaintjob"/> <seealso name="OnVehicleMod"/> <seealso name="OnEnterExitModShop"/> <remarks>Previewing a component inside a mod shop might call this callback.</remarks> <remarks>This callback is not called by <a href="#ChangeVehicleColor">ChangeVehicleColor</a>.</remarks> <returns> Returning <b><c>0</c></b> in this callback will deny the colour change. Returning <b><c>1</c></b> will allow it. This can be used to prevent hackers from changing vehicle colours using cheats.<p/> It is always called first in gamemode so returning <b><c>0</c></b> there also blocks other filterscripts from seeing it. </returns>
		</member>
		<member name="M:OnVehicleSirenStateChange" syntax="OnVehicleSirenStateChange(playerid, vehicleid, newstate)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that toggled the siren (driver)
			</param>
			<param name="vehicleid">
				The ID of the vehicle of which the siren was toggled for
			</param>
			<param name="newstate">
				<b><c>0</c></b> if siren was turned off, <b><c>1</c></b> if siren was turned on
			</param>
			<summary>This callback is called when a vehicle's siren is toggled.</summary>    <seealso name="GetVehicleParamsSirenState"/> <remarks>This callback was added in <b>SA-MP 0.3.7</b> and will not work in earlier versions!</remarks> <remarks>This callback can also be called by NPC.</remarks> <remarks>This callback is only called when a vehicle's siren is toggled on or off, NOT when the alternate siren is in use (holding horn).</remarks> <returns> <b><c>1</c></b> - Will prevent gamemode from receiving this callback.<p/> <b><c>0</c></b> - Indicates that this callback will be passed to the gamemode.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnVehicleSpawn" syntax="OnVehicleSpawn(vehicleid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="vehicleid">
				The ID of the vehicle that spawned
			</param>
			<summary>This callback is called when a vehicle <b>re</b>spawns.</summary>  <seealso name="OnVehicleDeath"/> <seealso name="OnPlayerSpawn"/> <seealso name="SetVehicleToRespawn"/> <seealso name="CreateVehicle"/> <returns> <b><c>0</c></b> - Will prevent other filterscripts from receiving this callback.<p/> <b><c>1</c></b> - Indicates that this callback will be passed to the next filterscript.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnVehicleStreamIn" syntax="OnVehicleStreamIn(vehicleid, forplayerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="vehicleid">
				The ID of the vehicle that streamed in for the player
			</param>
			<param name="forplayerid">
				The ID of the player who the vehicle streamed in for
			</param>
			<summary>Called when a vehicle is streamed to a player's client.</summary>   <seealso name="OnVehicleStreamOut"/> <seealso name="OnPlayerStreamIn"/> <seealso name="OnPlayerStreamOut"/> <remarks>This callback was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <remarks>This callback can also be called by NPC.</remarks> <returns> This callback does not handle returns.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnVehicleStreamOut" syntax="OnVehicleStreamOut(vehicleid, forplayerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="vehicleid">
				The ID of the vehicle that streamed out
			</param>
			<param name="forplayerid">
				The ID of the player who is no longer streaming the vehicle
			</param>
			<summary>This callback is called when a vehicle is streamed out for a player's client (it's so far away that they can't see it).</summary>   <seealso name="OnVehicleStreamIn"/> <seealso name="OnPlayerStreamIn"/> <seealso name="OnPlayerStreamOut"/> <remarks>This callback was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <remarks>This callback can also be called by NPC.</remarks> <returns> This callback does not handle returns.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:PC_Init" syntax="PC_Init()">
			<attribute name="native"/>
			<referrer name="OnGameModeInit"/>
		</member>
		<member name="M:PawnCmd_OnGameModeInit" syntax="PawnCmd_OnGameModeInit()">
			<attribute name="public"/>
			<stacksize value="3"/>
			<dependency name="SSCANF_OnGameModeInit"/>
			<dependency name="SSCANF_RunInit"/>
			<dependency name="SSCANF_gInit"/>
			<library>sscanf</library>  <remarks>  Called when the script starts if it is a gamemode.  This callback is also  called in filterscripts so we don't want to reinitialise the system in that  case.  </remarks> 
		</member>
		<member name="M:PlayerTextDrawAlignment" syntax="PlayerTextDrawAlignment(playerid, text, alignment)">
			<attribute name="native"/>
			<referrer name="OnPlayerRequestClass"/>
			<param name="playerid">
				The ID of the player whose player-textdraw to set the alignment of
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
				The ID of the player-textdraw to set the alignment of
			</param>
			<param name="alignment">
				<b><c>1</c></b>-left <b><c>2</c></b>-centered <b><c>3</c></b>-right
			</param>
			<summary>Set the text alignment of a player-textdraw.</summary>    <seealso name="CreatePlayerTextDraw"/> <seealso name="PlayerTextDrawDestroy"/> <seealso name="PlayerTextDrawColor"/> <seealso name="PlayerTextDrawBoxColor"/> <seealso name="PlayerTextDrawBackgroundColor"/> <seealso name="PlayerTextDrawFont"/> <seealso name="PlayerTextDrawLetterSize"/> <seealso name="PlayerTextDrawTextSize"/> <seealso name="PlayerTextDrawSetOutline"/> <seealso name="PlayerTextDrawSetShadow"/> <seealso name="PlayerTextDrawSetProportional"/> <seealso name="PlayerTextDrawUseBox"/> <seealso name="PlayerTextDrawSetString"/> <seealso name="PlayerTextDrawShow"/> <seealso name="PlayerTextDrawHide"/> <remarks>This feature (player-textdraws) was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks> <remarks>For alignment <b><c>2</c></b> (center) the x and y values of TextSize need to be swapped, see notes at <a href="#PlayerTextDrawTextSize">PlayerTextDrawTextSize</a>. </remarks>
		</member>
		<member name="M:PlayerTextDrawDestroy" syntax="PlayerTextDrawDestroy(playerid, text)">
			<attribute name="native"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="OnPlayerSpawn"/>
			<param name="playerid">
				The ID of the player who's player-textdraw to destroy
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
				The ID of the textdraw to destroy
			</param>
			<summary>Destroy a player-textdraw.</summary>   <seealso name="CreatePlayerTextDraw"/> <seealso name="PlayerTextDrawColor"/> <seealso name="PlayerTextDrawBoxColor"/> <seealso name="PlayerTextDrawBackgroundColor"/> <seealso name="PlayerTextDrawAlignment"/> <seealso name="PlayerTextDrawFont"/> <seealso name="PlayerTextDrawLetterSize"/> <seealso name="PlayerTextDrawTextSize"/> <seealso name="PlayerTextDrawSetOutline"/> <seealso name="PlayerTextDrawSetShadow"/> <seealso name="PlayerTextDrawSetProportional"/> <seealso name="PlayerTextDrawUseBox"/> <seealso name="PlayerTextDrawSetString"/> <seealso name="PlayerTextDrawShow"/> <seealso name="PlayerTextDrawHide"/> <remarks>This feature (player-textdraws) was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks>
		</member>
		<member name="M:PlayerTextDrawFont" syntax="PlayerTextDrawFont(playerid, text, font)">
			<attribute name="native"/>
			<referrer name="OnPlayerRequestClass"/>
			<param name="playerid">
				The ID of the player whose player-textdraw to change the font of
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
				The ID of the player-textdraw to change the font of
			</param>
			<param name="font">
				There are four font styles. A font value greater than <b><c>3</c></b> does not display, and anything greater than <b><c>16</c></b> crashes the client. See <a href="http://wiki.sa-mp.com/wiki/PlayerTextDrawFont">http://wiki.sa-mp.com/wiki/PlayerTextDrawFont</a>
			</param>
			<summary>Change the font of a player-textdraw.</summary>    <seealso name="CreatePlayerTextDraw"/> <seealso name="PlayerTextDrawDestroy"/> <seealso name="PlayerTextDrawColor"/> <seealso name="PlayerTextDrawBoxColor"/> <seealso name="PlayerTextDrawBackgroundColor"/> <seealso name="PlayerTextDrawAlignment"/> <seealso name="PlayerTextDrawLetterSize"/> <seealso name="PlayerTextDrawTextSize"/> <seealso name="PlayerTextDrawSetOutline"/> <seealso name="PlayerTextDrawSetShadow"/> <seealso name="PlayerTextDrawSetProportional"/> <seealso name="PlayerTextDrawUseBox"/> <seealso name="PlayerTextDrawSetString"/> <seealso name="PlayerTextDrawShow"/> <seealso name="PlayerTextDrawHide"/> <remarks>This feature (player-textdraws) was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks>
		</member>
		<member name="M:PlayerTextDrawShow" syntax="PlayerTextDrawShow(playerid, text)">
			<attribute name="native"/>
			<referrer name="OnPlayerRequestClass"/>
			<param name="playerid">
				The ID of the player to show the textdraw for
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
				The ID of the textdraw to show
			</param>
			<summary>Show a player-textdraw to the player it was created for.</summary>   <seealso name="PlayerTextDrawHide"/> <seealso name="CreatePlayerTextDraw"/> <seealso name="PlayerTextDrawDestroy"/> <seealso name="PlayerTextDrawColor"/> <seealso name="PlayerTextDrawBoxColor"/> <seealso name="PlayerTextDrawBackgroundColor"/> <seealso name="PlayerTextDrawAlignment"/> <seealso name="PlayerTextDrawFont"/> <seealso name="PlayerTextDrawLetterSize"/> <seealso name="PlayerTextDrawTextSize"/> <seealso name="PlayerTextDrawSetOutline"/> <seealso name="PlayerTextDrawSetShadow"/> <seealso name="PlayerTextDrawSetProportional"/> <seealso name="PlayerTextDrawUseBox"/> <seealso name="PlayerTextDrawSetString"/> <remarks>This feature (player-textdraws) was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks>
		</member>
		<member name="M:PutPlayerInVehicle" syntax="PutPlayerInVehicle(playerid, vehicleid, seatid)">
			<attribute name="native"/>
			<referrer name="pc_cmd_rustler"/>
			<param name="playerid">
				The ID of the player to put in a vehicle
			</param>
			<param name="vehicleid">
				The ID of the vehicle to put the player in
			</param>
			<param name="seatid">
				The ID of the seat to put the player in
			</param>
			<summary>Puts a player in a vehicle.</summary>    <seealso name="RemovePlayerFromVehicle"/> <seealso name="GetPlayerVehicleID"/> <seealso name="GetPlayerVehicleSeat"/> <seealso name="OnPlayerEnterVehicle"/> <remarks>If this function is used on a player that is already in a vehicle, other players will still see them in their previous vehicle. To fix this, first remove the player from the vehicle.</remarks> <remarks>If the seat is invalid or is taken, will cause a crash when they EXIT the vehicle.</remarks> <remarks>You can use <a href="#GetPlayerVehicleSeat">GetPlayerVehicleSeat</a> in a loop to check if a seat is occupied by any players.</remarks> <remarks> <b>Seats:</b><p/> <ul> <li><b><c>0</c></b> - driver.</li> <li><b><c>1</c></b> - front passenger.</li> <li><b><c>2</c></b> - back-left passenger.</li> <li><b><c>3</c></b> - back-right passenger.</li> <li><b><c>4+</c></b> - passenger seats (coach etc.).</li> </ul> </remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. The player or vehicle don't exist. </returns>
		</member>
		<member name="M:RemovePlayerDrunk" syntax="RemovePlayerDrunk(hitid)">
			<stacksize value="4"/>
			<dependency name="PlayerInfo"/>
			<dependency name="PlayerInfo"/>
			<dependency name="SetPlayerDrunkLevel"/>
			<dependency name="false"/>
			<param name="hitid">
			</param>
		</member>
		<member name="M:RemovePlayerMapIcon" syntax="RemovePlayerMapIcon(playerid, iconid)">
			<attribute name="native"/>
			<referrer name="OnPlayerRequestClass"/>
			<param name="playerid">
				The ID of the player whose icon to remove
			</param>
			<param name="iconid">
				The ID of the icon to remove. This is the second parameter of <a href="#SetPlayerMapIcon">SetPlayerMapIcon</a>
			</param>
			<summary>Removes a map icon that was set earlier for a player using <a href="#SetPlayerMapIcon">SetPlayerMapIcon</a>.</summary>   <seealso name="SetPlayerMapIcon"/> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. </returns>
		</member>
		<member name="M:SSCANF_GetClosestString" syntax="SSCANF_GetClosestString(input[], candidates[][], threshold, count)">
			<stacksize value="6"/>
			<referrer name="SSCANF_GetClosestValue"/>
			<dependency name="SSCANF_Levenshtein"/>
			<dependency name="cellmin"/>
			<param name="input">
				<paraminfo> [] </paraminfo>
				The first string to compare.
			</param>
			<param name="candidates">
				<paraminfo> [][] </paraminfo>
				A list of other strings to compare against.
			</param>
			<param name="threshold">
				How similar the strings must be to be considered a match.
			</param>
			<param name="count">
				The number of candidates.
			</param>
			<library>sscanf</library>          <remarks>  Takes an input string and an array of string possibilities (candidates) and  returns the index of the string closest to the input string.  If no valid  match is found, <c>-1</c> is returned.  Note that this will always return the  closest, even if the closest is not that close; which is why an optional  <c>threshold</c> parameter is available.  When this parameter is provided the  closest match must be closer in Levenshtein distance than the threshold,  otherwise again <c>-1</c> is returned.  </remarks> 
		</member>
		<member name="M:SSCANF_GetClosestValue" syntax="SSCANF_GetClosestValue(input[], candidates[][], results[], fail, threshold, count, check)">
			<stacksize value="8"/>
			<dependency name="SSCANF_GetClosestString"/>
			<dependency name="cellmin"/>
			<param name="input">
				<paraminfo> [] </paraminfo>
				The first string to compare.
			</param>
			<param name="candidates">
				<paraminfo> [][] </paraminfo>
				A list of other strings to compare against.
			</param>
			<param name="results">
				<paraminfo> [] </paraminfo>
				The values to return when the corresponding candidate (by index) is the closest  match.
			</param>
			<param name="fail">
				The value to return when there is no good match.
			</param>
			<param name="threshold">
				How similar the strings must be to be considered a match.
			</param>
			<param name="count">
				The number of candidates (must match <c>check</c>).
			</param>
			<param name="check">
				The number of results (must match <c>count</c>).
			</param>
			<library>sscanf</library>                <remarks>  Similar to <c>SSCANF_GetClosestString</c> in that it searches the  <c>candidates</c> array for the string most closely matching the <c>input</c>  and bounded by <c>threshold</c>.  But instead of returning the index this  function returns the value in the second <c>results</c> array at that index;  and instead of returning <c>-1</c> on failure it returns the value of  <c>fail</c>.  The two arrays must match in size and an <c>assert</c> in the  function checks for this.  </remarks> 
		</member>
		<member name="M:SSCANF_GetSimilarString" syntax="SSCANF_GetSimilarString(input[], candidates[][], threshold, count)">
			<stacksize value="6"/>
			<referrer name="SSCANF_GetSimilarValue"/>
			<dependency name="operator&gt;=(Float:,Float:)"/>
			<dependency name="SSCANF_TextSimilarity"/>
			<dependency name="cellmin"/>
			<param name="input">
				<paraminfo> [] </paraminfo>
				The first string to compare.
			</param>
			<param name="candidates">
				<paraminfo> [][] </paraminfo>
				A list of other strings to compare against.
			</param>
			<param name="threshold">
				<paraminfo>Float </paraminfo>
				How similar the strings must be to be considered a match.
			</param>
			<param name="count">
				The number of candidates.
			</param>
			<library>sscanf</library>          <remarks>  Takes an input string and an array of string possibilities (candidates) and  returns the index of the string closest to the input string.  If no valid  match is found, <c>-1</c> is returned.  Note that this will always return the  closest, even if the closest is not that close; which is why an optional  <c>threshold</c> parameter is available.  When this parameter is provided the  closest match must be closer in Levenshtein distance than the threshold,  otherwise again <c>-1</c> is returned.  </remarks> 
		</member>
		<member name="M:SSCANF_GetSimilarValue" syntax="SSCANF_GetSimilarValue(input[], candidates[][], results[], fail, threshold, count, check)">
			<stacksize value="8"/>
			<referrer name="sscanf_weapon"/>
			<referrer name="sscanf_vehicle"/>
			<dependency name="SSCANF_GetSimilarString"/>
			<dependency name="cellmin"/>
			<param name="input">
				<paraminfo> [] </paraminfo>
				The first string to compare.
			</param>
			<param name="candidates">
				<paraminfo> [][] </paraminfo>
				A list of other strings to compare against.
			</param>
			<param name="results">
				<paraminfo> [] </paraminfo>
				The values to return when the corresponding candidate (by index) is the closest  match.
			</param>
			<param name="fail">
				The value to return when there is no good match.
			</param>
			<param name="threshold">
				<paraminfo>Float </paraminfo>
				How similar the strings must be to be considered a match.
			</param>
			<param name="count">
				The number of candidates (must match <c>check</c>).
			</param>
			<param name="check">
				The number of results (must match <c>count</c>).
			</param>
			<library>sscanf</library>                <remarks>  Similar to <c>SSCANF_GetClosestString</c> in that it searches the  <c>candidates</c> array for the string most closely matching the <c>input</c>  and bounded by <c>threshold</c>.  But instead of returning the index this  function returns the value in the second <c>results</c> array at that index;  and instead of returning <c>-1</c> on failure it returns the value of  <c>fail</c>.  The two arrays must match in size and an <c>assert</c> in the  function checks for this.  </remarks> 
		</member>
		<member name="M:SSCANF_Init" syntax="SSCANF_Init(players, invalid, len)">
			<attribute name="native"/>
			<referrer name="SSCANF_RunInit"/>
			<param name="players">
				The maximum players on the server.
			</param>
			<param name="invalid">
				The invalid player ID.
			</param>
			<param name="len">
				<c>MAX_PLAYER_NAME</c>.
			</param>
			<library>sscanf</library>        <remarks>  Initialise the plugin with real server information.  </remarks> 
		</member>
		<member name="M:SSCANF_IsConnected" syntax="SSCANF_IsConnected(playerid)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="SSCANF_RunInit"/>
			<param name="playerid">
				The ID of the player.
			</param>
			<library>sscanf</library>    <remarks>  Checks if the plugin knows about a given player ID.  Used when modes restart  to re-add players.  </remarks> 
		</member>
		<member name="M:SSCANF_Join" syntax="SSCANF_Join(playerid, name[], npc)">
			<attribute name="native"/>
			<referrer name="SSCANF_RunInit"/>
			<referrer name="OnPlayerConnect"/>
			<param name="playerid">
				The ID of the player.
			</param>
			<param name="name">
				<paraminfo> [] </paraminfo>
				The name of the player.
			</param>
			<param name="npc">
				<paraminfo>bool </paraminfo>
				Is this player an NPC?
			</param>
			<library>sscanf</library>        <remarks>  Called when a player joins to inform the plugin of the connection.  </remarks> 
		</member>
		<member name="M:SSCANF_Leave" syntax="SSCANF_Leave(playerid)">
			<attribute name="native"/>
			<referrer name="OnPlayerDisconnect"/>
			<param name="playerid">
				The ID of the player.
			</param>
			<library>sscanf</library>    <remarks>  Called when a player leaves to inform the plugin of the disconnection.  </remarks> 
		</member>
		<member name="M:SSCANF_Levenshtein" syntax="SSCANF_Levenshtein(string1[], string2[])">
			<attribute name="native"/>
			<referrer name="SSCANF_GetClosestString"/>
			<param name="string1">
				<paraminfo> [] </paraminfo>
				The first string to compare.
			</param>
			<param name="string2">
				<paraminfo> [] </paraminfo>
				The second string to compare.
			</param>
			<library>sscanf</library>      <remarks>  Computes the <a href="https://en.wikipedia.org/wiki/Levenshtein_distance">  Levenshtein Distance</a> between two strings.  This is simlar to  <c>strcmp</c> in usage, but is slightly more "fuzzy".  Distances are used to  work out which string is the most similar to another one, though they may not  be identical.  Useful in <c>k</c> callback functions to determine if the  entered string is close to a possible string.  </remarks> 
		</member>
		<member name="M:SSCANF_OnCachedInit" syntax="SSCANF_OnCachedInit()">
			<attribute name="public"/>
			<stacksize value="1"/>
			<automaton name="_ALS"/>
			<referrer name="OnCachedInit"/>
		</member>
		<member name="M:SSCANF_OnFilterScriptInit" syntax="SSCANF_OnFilterScriptInit()">
			<attribute name="public"/>
			<stacksize value="1"/>
			<automaton name="_ALS"/>
			<referrer name="OnFilterScriptInit"/>
		</member>
		<member name="M:SSCANF_OnGameModeInit" syntax="SSCANF_OnGameModeInit()">
			<attribute name="public"/>
			<stacksize value="15"/>
			<automaton name="_ALS"/>
			<referrer name="PawnCmd_OnGameModeInit"/>
			<dependency name="Float:operator=(_:)"/>
			<dependency name="AddPlayerClassEx"/>
			<dependency name="CA_CreateObject"/>
			<dependency name="CA_Init"/>
			<dependency name="CPInfo"/>
			<dependency name="CPInfo"/>
			<dependency name="ClassInfo"/>
			<dependency name="ClassInfo"/>
			<dependency name="CreateDynamicCP"/>
			<dependency name="CreateDynamicMapIcon"/>
			<dependency name="CreateObject"/>
			<dependency name="CreatePickup"/>
			<dependency name="DisableInteriorEnterExits"/>
			<dependency name="LimitPlayerMarkerRadius"/>
			<dependency name="PerkInfo"/>
			<dependency name="PerkInfo"/>
			<dependency name="PickupInfo"/>
			<dependency name="PickupInfo"/>
			<dependency name="SetGameModeText"/>
			<dependency name="Skill_KingCharges"/>
			<dependency name="Skill_KingCharges"/>
			<dependency name="UsePlayerPedAnims"/>
			<dependency name="a"/>
			<dependency name="color"/>
			<dependency name="cp_bomb_timer"/>
			<dependency name="cp_defuse_timer"/>
			<dependency name="cp_mapicon"/>
			<dependency name="cp_player"/>
			<dependency name="cp_team"/>
			<dependency name="cp_x"/>
			<dependency name="cp_y"/>
			<dependency name="cp_z"/>
			<dependency name="false"/>
			<dependency name="is_active"/>
			<dependency name="is_picked_up"/>
			<dependency name="occupied"/>
			<dependency name="perk_armour"/>
			<dependency name="perk_health"/>
			<dependency name="perk_title"/>
			<dependency name="perk_weapon_ammo"/>
			<dependency name="perk_weapons"/>
			<dependency name="picked_up_by_team"/>
			<dependency name="pickup_object"/>
			<dependency name="pickup_x"/>
			<dependency name="pickup_y"/>
			<dependency name="pickup_z"/>
			<dependency name="skin"/>
			<dependency name="strins"/>
			<dependency name="title"/>
			<dependency name="true"/>
			<dependency name="x"/>
			<dependency name="y"/>
			<dependency name="z"/>
		</member>
		<member name="M:SSCANF_OnPlayerConnect" syntax="SSCANF_OnPlayerConnect(playerid)">
			<attribute name="public"/>
			<stacksize value="6"/>
			<automaton name="_ALS"/>
			<referrer name="OnPlayerConnect"/>
			<dependency name="Float:operator=(_:)"/>
			<dependency name="CreatePlayerTextDraw"/>
			<dependency name="GivePlayerMoney"/>
			<dependency name="PlayerInfo"/>
			<dependency name="PlayerInfo"/>
			<dependency name="SetPlayerColor"/>
			<dependency name="current_textdraw"/>
			<dependency name="deaths"/>
			<dependency name="false"/>
			<dependency name="is_carrying_bomb"/>
			<dependency name="is_player_spawned"/>
			<dependency name="kills"/>
			<dependency name="player_change_team"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:SSCANF_OnPlayerDisconnect" syntax="SSCANF_OnPlayerDisconnect(playerid, reason)">
			<attribute name="public"/>
			<stacksize value="3"/>
			<automaton name="_ALS"/>
			<referrer name="OnPlayerDisconnect"/>
			<dependency name="KillPlayerTimers"/>
			<param name="playerid">
			</param>
			<param name="reason">
			</param>
		</member>
		<member name="M:SSCANF_OnScriptInit" syntax="SSCANF_OnScriptInit()">
			<attribute name="public"/>
			<stacksize value="1"/>
			<automaton name="_ALS"/>
			<referrer name="OnScriptInit"/>
		</member>
		<member name="M:SSCANF_Option" syntax="SSCANF_Option(name[], value)">
			<stacksize value="1"/>
			<param name="name">
				<paraminfo> [] </paraminfo>
				The sscanf option to get or set.  For example <c>SSCANF_ARGB</c>.
			</param>
			<param name="value">
				<paraminfo> {_,Float} </paraminfo>
				The optional value to use when setting the option.
			</param>
			<library>sscanf</library>      <remarks>  Backwards-compatibility with <c>SSCANF_Option</c>.  Usage:  <code>  SSCANF_Option(SSCANF_QUIET, 1);           <br />  new quiet = SSCANF_Option(SSCANF_QUIET);  </code>  This doesn't actually use a default parameter because a user may want to set  the option to whatever that parameter is.  Instead this is a macro that calls  <c>SSCANF_GetOption__</c> when called with one parameter (just a name), or  instead calls <c>SSCANF_SetOption__</c> when called with two - a name and a  value.  </remarks> 
		</member>
		<member name="M:SSCANF_RunInit" syntax="SSCANF_RunInit()">
			<stacksize value="31"/>
			<referrer name="OnScriptInit"/>
			<referrer name="OnFilterScriptInit"/>
			<referrer name="PawnCmd_OnGameModeInit"/>
			<referrer name="OnCachedInit"/>
			<dependency name="GetMaxPlayers"/>
			<dependency name="GetPlayerName"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="IsPlayerNPC"/>
			<dependency name="SSCANF_Init"/>
			<dependency name="SSCANF_IsConnected"/>
			<dependency name="SSCANF_Join"/>
			<dependency name="SSCANF_gInit"/>
			<library>sscanf</library> <remarks> Generic initialisation code called from a range of different init publics. </remarks> <!-- <p/> <p/> There's a bug in the old compiler with the pawndoc generation for functions containing <c>state</c>.  This little trick starts an XML comment at the end of the documentation <c>SSCANF_RunInit</c> and immediately closes it again in a dedicated function <c>SSCANF_RunInit0</c>, which is sorted next lexicographically. --> <transition target="_ALS_go"/>

		</member>
		<member name="M:SSCANF_TextSimilarity" syntax="SSCANF_TextSimilarity(string1[], string2[])">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="SSCANF_GetSimilarString"/>
			<param name="string1">
				<paraminfo> [] </paraminfo>
				The first string to compare.
			</param>
			<param name="string2">
				<paraminfo> [] </paraminfo>
				The second string to compare.
			</param>
			<library>sscanf</library>      <remarks>  This works out the similarity between two strings.  The Levenshtein distance  often produces results that seem weird to people, for example by that measure  <c>NRG</c> is closer to <c>TUG</c> than <c>NRG-500</c>.  Instead this  function compares all pairs of letters between the two strings to work out  what percentage of each string is in the other string, then multiplies the  results to get the final similarity.  This algorithm produces much more human  sane results, and can handle things like <c>ls police<c> matching  <c>Police Car (LSPD)</c>.  It ignores all punctuation and case as well.  </remarks> 
		</member>
		<member name="M:SSCANF_Version" syntax="SSCANF_Version(version[], size)">
			<stacksize value="1"/>
			<dependency name="SSCANF_VERSION_BCD"/>
			<param name="version">
				<paraminfo> [] </paraminfo>
				Pass-by-reference return value.
			</param>
			<param name="size">
				The size of the destination array.
			</param>
			<library>sscanf</library>      <remarks>  Get the SSCANF plugin version as a string (e.g. <c>"2.11.2"</c>) <em>or</em>  a BCD-encoded value (e.g. <c>0x021102</c>).  This function returns a string  (by reference) when called with parameters, or a number (directly) when not.  </remarks> 
		</member>
		<member name="M:SSCANF__" syntax="SSCANF__(file[], line, data[], format[], ...)">
			<attribute name="native"/>
			<referrer name="pc_cmd_cjump"/>
			<param name="file">
				<paraminfo> [] </paraminfo>
				The file in which this call is found.
			</param>
			<param name="line">
				The line at which this call is found.
			</param>
			<param name="data">
				<paraminfo> [] </paraminfo>
				The input string containing the data to parse out.
			</param>
			<param name="format">
				<paraminfo> [] </paraminfo>
				The format description of what the input data should contain.
			</param>
			<param name="...">
				<paraminfo> {T_WEAPON,Float,_} </paraminfo>
			</param>
			<library>sscanf</library>          <remarks>  The current true implementation of <c>sscanf</c> in the plugin.  This is  wrapped by macros to provide <c>sscanf</c> enhanced with filenames and line  numbers so that errors have more information.  The plugin also contains a  native function called <c>sscanf</c> which is only for backwards-  compatibility with older versions of this include.  </remarks> 
		</member>
		<member name="M:SendClientMessage" syntax="SendClientMessage(playerid, color, message[])">
			<attribute name="native"/>
			<referrer name="SetPlayerLastDamager"/>
			<referrer name="pc_cmd_st"/>
			<referrer name="SwitchPlayerTeam"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerPickUpPickup"/>
			<referrer name="OnPlayerEnterDynamicCP"/>
			<referrer name="OnPlayerLeaveDynamicCP"/>
			<param name="playerid">
				The ID of the player to display the message to
			</param>
			<param name="color">
				The color of the message (<b>RGBA</b>)
			</param>
			<param name="message">
				<paraminfo> [] </paraminfo>
				The text that will be displayed <b>(max 144 characters)</b>
			</param>
			<summary>This function sends a message to a specific player with a chosen color in the chat. The whole line in the chatbox will be in the set color unless color embedding is used (since <b><c>0.3c</c></b>).</summary>    <seealso name="SendClientMessageToAll"/> <seealso name="SendPlayerMessageToPlayer"/> <seealso name="SendPlayerMessageToAll"/> <remarks>If a message is longer than 144 characters, it will not be sent. Truncation can be used to prevent this. Displaying a message on multiple lines will also solve this issue. </remarks> <remarks>Avoid using the percent sign (or format specifiers) in the actual message text without properly escaping it (like <b><c>%%</c></b>). It will result in crashes otherwise. </remarks> <remarks>You can use color embedding for multiple colors in the message. </remarks> <returns> <b><c>1</c></b>: The function executed successfully. Success is reported when the string is over 144 characters, but the message won't be sent.<p/> <b><c>0</c></b>: The function failed to execute. The player is not connected. </returns>
		</member>
		<member name="M:SendClientMessageToAll" syntax="SendClientMessageToAll(color, message[])">
			<attribute name="native"/>
			<referrer name="OnPlayerEnterDynamicCP"/>
			<referrer name="DestroyPickupBomb"/>
			<referrer name="DefusePickupBomb"/>
			<param name="color">
				The color of the message (<b>RGBA</b>)
			</param>
			<param name="message">
				<paraminfo> [] </paraminfo>
				The message to show (<b>max 144 characters</b>)
			</param>
			<summary>Displays a message in chat to all players. This is a multi-player equivalent of <a href="#SendClientMessage">SendClientMessage</a>.</summary>   <seealso name="SendClientMessage"/> <seealso name="SendPlayerMessageToAll"/> <remarks>Avoid using format specifiers in your messages without formatting the string that is sent. It will result in crashes otherwise.</remarks> <returns>This function always returns <b><c>1</c></b>.</returns>
		</member>
		<member name="M:SendDeathMessage" syntax="SendDeathMessage(killer, killee, weapon)">
			<attribute name="native"/>
			<referrer name="OnPlayerDeath"/>
			<param name="killer">
				The ID of the killer (can be <b><c>INVALID_PLAYER_ID</c></b>)
			</param>
			<param name="killee">
				The ID of the player that died
			</param>
			<param name="weapon">
				The <a href="http://wiki.sa-mp.com/wiki/Weapons">reason</a> (not always a weapon) for the victim's death. Special icons can also be used (<b><c>ICON_CONNECT</c></b> and <b><c>ICON_DISCONNECT</c></b>)
			</param>
			<summary>Adds a death to the 'killfeed' on the right-hand side of the screen for all players.</summary>    <seealso name="SendDeathMessageToPlayer"/> <seealso name="OnPlayerDeath"/> <remarks>Death messages can be cleared by using a valid player ID for <paramref name="killee"/> that is not connected.</remarks> <remarks>To show a death message for just a single player, use <a href="#SendDeathMessageToPlayer">SendDeathMessageToPlayer</a>. </remarks> <remarks>You can use NPCs to create your own custom death reasons. </remarks> <returns>This function always returns <b><c>1</c></b>, even if the function fails to execute. The function fails to execute (no death message shown) if <paramref name="killee"/> is invalid. If <paramref name="reason"/> is invalid, a generic skull-and-crossbones icon is shown. <paramref name="killer"/> being invalid (<b><c>INVALID_PLAYER_ID</c></b>) is valid.</returns>
		</member>
		<member name="M:SetGameModeText" syntax="SetGameModeText(string[])">
			<attribute name="native"/>
			<referrer name="SSCANF_OnGameModeInit"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
				The gamemode name to display
			</param>
			<summary>Set the name of the game mode, which appears in the server browser.</summary> 
		</member>
		<member name="M:SetObjectPos" syntax="SetObjectPos(objectid, X, Y, Z)">
			<attribute name="native"/>
			<referrer name="CA_SetObjectPos_DC"/>
			<param name="objectid">
				The ID of the object to set the position of. Returned by <a href="#CreateObject">CreateObject</a>
			</param>
			<param name="X">
				<paraminfo>Float </paraminfo>
				The X coordinate to position the object at
			</param>
			<param name="Y">
				<paraminfo>Float </paraminfo>
				The Y coordinate to position the object at
			</param>
			<param name="Z">
				<paraminfo>Float </paraminfo>
				The Z coordinate to position the object at
			</param>
			<summary>Change the position of an object.</summary>     <seealso name="GetObjectPos"/> <seealso name="SetObjectRot"/> <seealso name="GetPlayerObjectPos"/> <seealso name="CreateObject"/> <returns>This function always returns <b><c>1</c></b>, even if the object specified does not exist.</returns>
		</member>
		<member name="M:SetObjectRot" syntax="SetObjectRot(objectid, RotX, RotY, RotZ)">
			<attribute name="native"/>
			<referrer name="CA_SetObjectRot_DC"/>
			<param name="objectid">
				The ID of the object to set the rotation of
			</param>
			<param name="RotX">
				<paraminfo>Float </paraminfo>
				The X rotation
			</param>
			<param name="RotY">
				<paraminfo>Float </paraminfo>
				The Y rotation
			</param>
			<param name="RotZ">
				<paraminfo>Float </paraminfo>
				The Z rotation
			</param>
			<summary>Set the rotation of an object on the three axes (X, Y and Z).</summary>     <seealso name="GetObjectRot"/> <seealso name="GetObjectPos"/> <seealso name="CreateObject"/> <seealso name="SetPlayerObjectRot"/> <returns>This function always returns <b><c>1</c></b>, even if the object doesn't exist.</returns>
		</member>
		<member name="M:SetPlayerArmour" syntax="SetPlayerArmour(playerid, armour)">
			<attribute name="native"/>
			<referrer name="OnPlayerSpawn"/>
			<param name="playerid">
				The ID of the player to set the armour of
			</param>
			<param name="armour">
				<paraminfo>Float </paraminfo>
				The amount of armour to set, as a percentage (float). Values larger than <b><c>100</c></b> are valid, but won't be displayed in the HUD's armour bar
			</param>
			<summary>Set a player's armor level.</summary>   <seealso name="GetPlayerArmour"/> <seealso name="SetPlayerHealth"/> <seealso name="GetPlayerHealth"/> <remarks>Armour is obtained rounded to integers: set <b><c>50.15</c></b>, but get <b><c>50.0</c></b></remarks> <remarks>The function's name is armour, not armor (Americanized). This is inconsistent with the rest of SA-MP, so remember that.</remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the player specified does not exist. </returns>
		</member>
		<member name="M:SetPlayerCameraLookAt" syntax="SetPlayerCameraLookAt(playerid, x, y, z, cut)">
			<attribute name="native"/>
			<referrer name="OnPlayerRequestClass"/>
			<param name="playerid">
				The ID of the player whose camera to set
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
				The X coordinate for the player's camera to look at
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
				The Y coordinate for the player's camera to look at
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
				The Z coordinate for the player's camera to look at
			</param>
			<param name="cut">
				The style of the change. Can be used to interpolate (change slowly) from old pos to new pos using <b><c>CAMERA_MOVE</c></b>. Added in <b>0.3e</b>. Leave out for older versions (optional=<b><c>CAMERA_CUT</c></b>)
			</param>
			<summary>Set the direction a player's camera looks at. Generally meant to be used in combination with <a href="#SetPlayerCameraPos">SetPlayerCameraPos</a>.</summary>      <seealso name="SetPlayerCameraPos"/> <seealso name="SetCameraBehindPlayer"/> <seealso name="GetPlayerCameraPos"/> <seealso name="GetPlayerCameraFrontVector"/> <remarks>Using the camera functions directly after enabling spectator mode doesn't work.</remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. The player specified does not exist. </returns>
		</member>
		<member name="M:SetPlayerCameraPos" syntax="SetPlayerCameraPos(playerid, x, y, z)">
			<attribute name="native"/>
			<referrer name="OnPlayerRequestClass"/>
			<param name="playerid">
				ID of the player
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
				The X coordinate to place the camera at
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
				The Y coordinate to place the camera at
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
				The Z coordinate to place the camera at
			</param>
			<summary>Sets the camera to a specific position for a player.</summary>     <seealso name="SetPlayerCameraLookAt"/> <seealso name="SetCameraBehindPlayer"/> <remarks>You may also have to use <a href="#SetPlayerCameraLookAt">SetPlayerCameraLookAt</a> with this function in order to work properly.</remarks> <remarks>Use <a href="#SetCameraBehindPlayer">SetCameraBehindPlayer</a> to reset the camera to behind the player.</remarks> <remarks>Using the camera functions directly after enabling spectator mode doesn't work.</remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. The player specified doesn't exist. </returns>
		</member>
		<member name="M:SetPlayerColor" syntax="SetPlayerColor(playerid, color)">
			<attribute name="native"/>
			<referrer name="SSCANF_OnPlayerConnect"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerDeath"/>
			<param name="playerid">
				The ID of the player whose color to set
			</param>
			<param name="color">
				The color to set. Supports alpha values (<b>RGBA</b>)
			</param>
			<summary>Set the colour of a player's nametag and marker (radar blip).</summary>   <seealso name="SetPlayerMarkerForPlayer"/> <seealso name="GetPlayerColor"/> <seealso name="ChangeVehicleColor"/> <remarks>This function will change player's color for everyone, even if player's color was changed with <a href="#SetPlayerMarkerForPlayer">SetPlayerMarkerForPlayer</a> for any other player. </remarks> <remarks>If used under <a href="#OnPlayerConnect">OnPlayerConnect</a>, the affecting player will not see the color in the TAB menu. </remarks>
		</member>
		<member name="M:SetPlayerDrunkLevel" syntax="SetPlayerDrunkLevel(playerid, level)">
			<attribute name="native"/>
			<referrer name="OnPlayerWeaponShot"/>
			<referrer name="RemovePlayerDrunk"/>
			<param name="playerid">
				The ID of the player to set the drunkenness of
			</param>
			<param name="level">
				The level of drunkenness to set
			</param>
			<summary>Sets the drunk level of a player which makes the player's camera sway and vehicles hard to control.</summary>   <seealso name="GetPlayerDrunkLevel"/> <remarks> Players' drunk level will automatically decrease over time, based on their FPS (players with <b><c>50</c></b> FPS will lose <b><c>50</c></b> 'levels' per second. This is useful for determining a player's FPS!).<p/> In <b>0.3a</b> the drunk level will decrement and stop at <b><c>2000</c></b>. In <b>0.3b+</b> the drunk level decrements to <b><c>0</c></b>)<p/> Levels over <b><c>2000</c></b> make the player drunk (camera swaying and vehicles difficult to control).<p/> Max drunk level is <b><c>50000</c></b>.<p/> While the drunk level is above <b><c>5000</c></b>, the player's HUD (radar etc.) will be hidden. </remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the player is not connected. </returns>
		</member>
		<member name="M:SetPlayerFacingAngle" syntax="SetPlayerFacingAngle(playerid, ang)">
			<attribute name="native"/>
			<referrer name="OnPlayerRequestClass"/>
			<param name="playerid">
				The ID of the player to set the facing angle of
			</param>
			<param name="ang">
				<paraminfo>Float </paraminfo>
				The angle the player should face
			</param>
			<summary>Set a player's facing angle (Z rotation).</summary>   <seealso name="GetPlayerFacingAngle"/> <seealso name="SetPlayerPos"/> <remarks>Angles are reversed in GTA:SA; 90 degrees would be East in the real world, but in GTA:SA 90 degrees is in fact West. North and South are still 0/360 and 180. To convert this, simply do <b>360 - angle</b>.</remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. The player specified does not exist. </returns>
		</member>
		<member name="M:SetPlayerHealth" syntax="SetPlayerHealth(playerid, health)">
			<attribute name="native"/>
			<referrer name="SwitchPlayerTeam"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerTakeDamage"/>
			<param name="playerid">
				The ID of the player to set the health of
			</param>
			<param name="health">
				<paraminfo>Float </paraminfo>
				The value to set the player's health to. Max health that can be displayed in the HUD is <b><c>100</c></b>, though higher values are valid
			</param>
			<summary>Set the health of a player.</summary>   <seealso name="GetPlayerHealth"/> <seealso name="GetPlayerArmour"/> <seealso name="SetPlayerArmour"/> <remarks>Health is obtained rounded to integers: set <b><c>50.15</c></b>, but get <b><c>50.0</c></b></remarks> <remarks>If a player's health is set to <b><c>0</c></b> or a minus value, they will die instantly.</remarks> <remarks>If a player's health is below <b><c>10</c></b> or above <b><c>98303</c></b>, their health bar will flash. </remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the player specified does not exist. </returns>
		</member>
		<member name="M:SetPlayerInterior" syntax="SetPlayerInterior(playerid, interiorid)">
			<attribute name="native"/>
			<referrer name="OnPlayerSpawn"/>
			<param name="playerid">
				The ID of the player to set the interior of
			</param>
			<param name="interiorid">
				The <a href="http://wiki.sa-mp.com/wiki/InteriorIDs">interior ID</a> to set the player in
			</param>
			<summary>Set a player's interior. A list of currently known interiors and their positions can be found <a href="http://wiki.sa-mp.com/wiki/InteriorIDs">here</a>.</summary>   <seealso name="GetPlayerInterior"/> <seealso name="LinkVehicleToInterior"/> <seealso name="OnPlayerInteriorChange"/> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the player is not connected. </returns>
		</member>
		<member name="M:SetPlayerLastDamager" syntax="SetPlayerLastDamager(playerid, issuerid, weapon)">
			<stacksize value="56"/>
			<referrer name="CreateCustomExplosion"/>
			<referrer name="OnPlayerTakeDamage"/>
			<dependency name="PlayerLastDamagerInfo"/>
			<dependency name="PlayerLastDamagerInfo"/>
			<dependency name="SendClientMessage"/>
			<dependency name="format"/>
			<dependency name="player_last_damagerid"/>
			<dependency name="player_last_damagerid_weapon"/>
			<param name="playerid">
			</param>
			<param name="issuerid">
			</param>
			<param name="weapon">
			</param>
		</member>
		<member name="M:SetPlayerPos" syntax="SetPlayerPos(playerid, x, y, z)">
			<attribute name="native"/>
			<referrer name="OnPlayerRequestClass"/>
			<param name="playerid">
				The ID of the player to set the position of
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
				The X coordinate to position the player at
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
				The Y coordinate to position the player at
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
				The Z coordinate to position the player at
			</param>
			<summary>Set a player's position.</summary>     <seealso name="SetPlayerPosFindZ"/> <seealso name="SetPlayerFacingAngle"/> <seealso name="GetPlayerPos"/> <seealso name="SetVehiclePos"/> <seealso name="GetVehiclePos"/> <remarks>Using this function on a player in a vehicle will instantly remove them from the vehicle. Useful for quickly ejecting players.</remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the player specified does not exist. </returns>
		</member>
		<member name="M:SetPlayerScore" syntax="SetPlayerScore(playerid, score)">
			<attribute name="native"/>
			<referrer name="DestroyPickupBomb"/>
			<referrer name="DefusePickupBomb"/>
			<param name="playerid">
				The ID of the player to set the score of
			</param>
			<param name="score">
				The value to set the player's score to
			</param>
			<summary>Set a player's score. Players' scores are shown in the scoreboard (shown by holding the TAB key).</summary>   <seealso name="GetPlayerScore"/> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the player specified does not exist. </returns>
		</member>
		<member name="M:SetPlayerVelocity" syntax="SetPlayerVelocity(playerid, X, Y, Z)">
			<attribute name="native"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="playerid">
				The player to apply the speed to
			</param>
			<param name="X">
				<paraminfo>Float </paraminfo>
				The velocity (speed) on the X axis
			</param>
			<param name="Y">
				<paraminfo>Float </paraminfo>
				The velocity (speed) on the Y axis
			</param>
			<param name="Z">
				<paraminfo>Float </paraminfo>
				The velocity (speed) on the Z axis
			</param>
			<summary>Set a player's velocity on the X, Y and Z axes.</summary>     <seealso name="GetPlayerVelocity"/> <seealso name="SetVehicleVelocity"/> <seealso name="GetVehicleVelocity"/> <remarks>This function was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the player is not connected. </returns>
		</member>
		<member name="M:SetTimerEx" syntax="SetTimerEx(funcname[], interval, repeating, format[], ...)">
			<attribute name="native"/>
			<referrer name="pc_cmd_st"/>
			<referrer name="OnPlayerEnterDynamicCP"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="funcname">
				<paraminfo> [] </paraminfo>
				The name of a public function to call when the timer expires
			</param>
			<param name="interval">
				Interval in milliseconds
			</param>
			<param name="repeating">
				Whether the timer should be called repeatedly (can only be stopped with <a href="#KillTimer">KillTimer</a>) or only once
			</param>
			<param name="format">
				<paraminfo> [] </paraminfo>
				Special format indicating the types of values the timer will pass
			</param>
			<param name="...">
				<paraminfo> {Float,_} </paraminfo>
				Indefinite number of arguments to pass (must follow format specified in previous parameter)
			</param>
			<summary>Sets a timer to call a function after the specified interval. This variant ('Ex') can pass parameters (such as a player ID) to the function.</summary>      <seealso name="SetTimer"/> <seealso name="KillTimer"/> <seealso name="CallLocalFunction"/> <seealso name="CallRemoteFunction"/> <remarks>Timer intervals are not accurate (roughly 25% off). There's a fix available <a href="http://forum.sa-mp.com/showthread.php?t=289675">here</a>. </remarks> <remarks>Timer IDs are never used twice. You can use KillTimer() on a timer ID and it won't matter if it's running or not. </remarks> <remarks>The function that should be called must be public. </remarks> <remarks>The use of many timers will result in increased memory/cpu usage. </remarks> <remarks> <b>Format syntax:</b><p/> <ul> <li><b><c>i</c></b> - integer</li> <li><b><c>d</c></b> - integer</li> <li><b><c>a</c></b> - array The next parameter must be an integer (<b><c>"i"</c></b>) with the array's size <b>[CURRENTLY UNUSABLE]</b></li> <li><b><c>s</c></b> - string <b>[CURRENTLY UNUSABLE]</b></li> <li><b><c>f</c></b> - float</li> <li><b><c>b</c></b> - boolean</li> </ul> </remarks> <returns>The ID of the timer that was started. Timer IDs start at <b><c>1</c></b> and are never reused. There are no internal checks to verify that the parameters passed are valid (e.g. duration not a minus value).</returns>
		</member>
		<member name="M:SetVehicleAngularVelocity" syntax="SetVehicleAngularVelocity(vehicleid, X, Y, Z)">
			<attribute name="native"/>
			<referrer name="pc_cmd_cjump"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="vehicleid">
				The ID of the vehicle to set the velocity of
			</param>
			<param name="X">
				<paraminfo>Float </paraminfo>
				The amount of velocity in the angular X direction
			</param>
			<param name="Y">
				<paraminfo>Float </paraminfo>
				The amount of velocity in the angular Y direction 
			</param>
			<param name="Z">
				<paraminfo>Float </paraminfo>
				The amount of velocity in the angular Z direction
			</param>
			<summary>Sets the angular X, Y and Z velocity of a vehicle.</summary>     <seealso name="SetVehicleVelocity"/> <seealso name="GetVehicleVelocity"/> <remarks>This function was added in <b>SA-MP 0.3b</b> and will not work in earlier versions!</remarks> <remarks>This function has no effect on un-occupied vehicles and does not effect trains.</remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. The vehicle does not exist. </returns>
		</member>
		<member name="M:SetVehicleVelocity" syntax="SetVehicleVelocity(vehicleid, X, Y, Z)">
			<attribute name="native"/>
			<referrer name="pc_cmd_cjump"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="vehicleid">
				The ID of the vehicle to set the velocity of
			</param>
			<param name="X">
				<paraminfo>Float </paraminfo>
				The velocity in the X direction
			</param>
			<param name="Y">
				<paraminfo>Float </paraminfo>
				The velocity in the Y direction 
			</param>
			<param name="Z">
				<paraminfo>Float </paraminfo>
				The velocity in the Z direction
			</param>
			<summary>Sets the X, Y and Z velocity of a vehicle.</summary>     <remarks>This function was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <remarks>This function has no affect on un-occupied vehicles and does not affect trains.</remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. The vehicle does not exist. </returns>
		</member>
		<member name="M:ShowPlayerDialog" syntax="ShowPlayerDialog(playerid, dialogid, style, caption[], info[], button1[], button2[])">
			<attribute name="native"/>
			<referrer name="ForcePerkSelection"/>
			<param name="playerid">
				The ID of the player to show the dialog to
			</param>
			<param name="dialogid">
				An ID to assign this dialog to, so responses can be processed. Max dialogid is <b><c>32767</c></b>. Using negative values will close any open dialog
			</param>
			<param name="style">
				The style of the dialog
			</param>
			<param name="caption">
				<paraminfo> [] </paraminfo>
				The title at the top of the dialog. The length of the caption can not exceed more than 64 characters before it starts to cut off
			</param>
			<param name="info">
				<paraminfo> [] </paraminfo>
				The text to display in the main dialog. Use <b><c>\n</c></b> to start a new line and <b><c>\t</c></b> to tabulate
			</param>
			<param name="button1">
				<paraminfo> [] </paraminfo>
				The text on the left button
			</param>
			<param name="button2">
				<paraminfo> [] </paraminfo>
				The text on the right button. Leave it blank ( "" ) to hide it
			</param>
			<summary>Shows the player a synchronous (only one at a time) dialog box.</summary>        <seealso name="TextDrawShowForPlayer"/> <seealso name="OnDialogResponse"/> <remarks>This function was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <remarks>Use color embedding for multiple colors in the text. </remarks> <remarks>Using <b><c>-1</c></b> as dialogid closes all dialogs currently shown on the client's screen. </remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the player is not connected.<p/> </returns>
		</member>
		<member name="M:SpawnPlayer" syntax="SpawnPlayer(playerid)">
			<attribute name="native"/>
			<referrer name="ForcePerkSelection"/>
			<param name="playerid">
				The ID of the player to spawn
			</param>
			<summary>(Re)Spawns a player.</summary>  <seealso name="SetSpawnInfo"/> <seealso name="AddPlayerClass"/> <seealso name="OnPlayerSpawn"/> <remarks>Kills the player if they are in a vehicle and then they spawn with a bottle in their hand.</remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the player is not connected. </returns>
		</member>
		<member name="M:Streamer_OnItemStreamIn" syntax="Streamer_OnItemStreamIn(type, id, forplayerid)">
			<stacksize value="1"/>
			<param name="type">
			</param>
			<param name="id">
				<paraminfo> {Text3D,_} </paraminfo>
			</param>
			<param name="forplayerid">
			</param>
		</member>
		<member name="M:Streamer_OnItemStreamOut" syntax="Streamer_OnItemStreamOut(type, id, forplayerid)">
			<stacksize value="1"/>
			<param name="type">
			</param>
			<param name="id">
				<paraminfo> {Text3D,_} </paraminfo>
			</param>
			<param name="forplayerid">
			</param>
		</member>
		<member name="M:Streamer_OnPluginError" syntax="Streamer_OnPluginError(error[])">
			<stacksize value="1"/>
			<param name="error">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:SwitchPlayerTeam" syntax="SwitchPlayerTeam(playerid)">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="Float:operator=(_:)"/>
			<dependency name="GetPlayerAnimationIndex"/>
			<dependency name="PlayerInfo"/>
			<dependency name="PlayerInfo"/>
			<dependency name="SendClientMessage"/>
			<dependency name="SetPlayerHealth"/>
			<dependency name="player_change_team"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:TIMERFIX_OnPlayerDisconnect" syntax="TIMERFIX_OnPlayerDisconnect(playerid, reason)">
			<attribute name="public"/>
			<stacksize value="3"/>
			<dependency name="DestroyDynamicObject"/>
			<dependency name="PlayerInfo"/>
			<dependency name="SkillInfo"/>
			<dependency name="SkillInfo"/>
			<dependency name="player_perk"/>
			<dependency name="skill_king_charges"/>
			<param name="playerid">
			</param>
			<param name="reason">
			</param>
		</member>
		<member name="M:TogglePlayerSpectating" syntax="TogglePlayerSpectating(playerid, toggle)">
			<attribute name="native"/>
			<referrer name="ForcePerkSelection"/>
			<referrer name="OnDialogResponse"/>
			<param name="playerid">
				The ID of the player who should spectate
			</param>
			<param name="toggle">
				<b><c>1</c></b> to enable spectating and <b><c>0</c></b> to disable
			</param>
			<summary>Toggle whether a player is in spectator mode or not. While in spectator mode a player can spectate (watch) other players and vehicles. After using this function, either <a href="#PlayerSpectatePlayer">PlayerSpectatePlayer</a> or <a href="#PlayerSpectateVehicle">PlayerSpectateVehicle</a> needs to be used.</summary>   <seealso name="PlayerSpectatePlayer"/> <seealso name="PlayerSpectateVehicle"/> <remarks>If the player is not loaded in before setting the spectate status to false, the connection can be closed unexpectedly.</remarks> <remarks>When spectator mode is disabled, <a href="#OnPlayerSpawn">OnPlayerSpawn</a> will automatically be called, if you wish to restore player to state before spectating, you will have to handle that in <a href="#OnPlayerSpawn">OnPlayerSpawn</a>. Note also, that player can also go to class selection before if they used F4 during spectate, a player also CAN die in spectate mode due to various glitches.</remarks> <remarks>When a player is in spectate mode their HUD is hidden, making it useful for setting a player's camera without the HUD. Also, objects near the player's camera will be streamed in, making this useful for interpolating cameras.</remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. The player does not exist. </returns>
		</member>
		<member name="M:UsePlayerPedAnims" syntax="UsePlayerPedAnims()">
			<attribute name="native"/>
			<referrer name="SSCANF_OnGameModeInit"/>
			<summary>Uses standard player walking animation (animation of the CJ skin) instead of custom animations for every skin (e.g. skating for skater skins).</summary> <seealso name="ApplyAnimation"/> <seealso name="ClearAnimations"/> <remarks>Only works when placed under <a href="#OnGameModeInit">OnGameModeInit</a>.</remarks> <remarks>Not using this function causes two-handed weapons (not dual-handed - a single weapon that is held by both hands) to be held in only one hand.</remarks>
		</member>
		<member name="M:VectorSize" syntax="VectorSize(x, y, z)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="CA_GetRoomCenter"/>
			<param name="x">
				<paraminfo>Float </paraminfo>
				The vector's magnitude on the X axis
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
				The vector's magnitude on the Y axis
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
				The vector's magnitude on the Z axis
			</param>
			<summary>Returns the norm (length) of the provided vector.</summary>    <seealso name="GetPlayerDistanceFromPoint"/> <seealso name="GetVehicleDistanceFromPoint"/> <seealso name="floatsqroot"/> <remarks>This function was added in <b>SA-MP 0.3z</b> and will not work in earlier versions!</remarks> <returns>The norm (length) of the provided vector as a float.</returns>
		</member>
		<member name="M:_SSCANF_IncludeStates" syntax="_SSCANF_IncludeStates()">
			<stacksize value="1"/>
			<automaton name="_ALS"/>
			<library>sscanf</library>  <remarks>  Common ALS boilerplate to ensure that all the <c>&lt;_ALS : &gt;</c> states  are known to the compiler.  </remarks> 
		</member>
		<member name="M:float" syntax="float(value)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="operator*(Float:,_:)"/>
			<referrer name="operator/(Float:,_:)"/>
			<referrer name="operator/(_:,Float:)"/>
			<referrer name="operator+(Float:,_:)"/>
			<referrer name="operator-(Float:,_:)"/>
			<referrer name="operator-(_:,Float:)"/>
			<referrer name="operator==(Float:,_:)"/>
			<referrer name="operator!=(Float:,_:)"/>
			<referrer name="operator&gt;(Float:,_:)"/>
			<referrer name="operator&gt;(_:,Float:)"/>
			<referrer name="operator&gt;=(Float:,_:)"/>
			<referrer name="operator&gt;=(_:,Float:)"/>
			<referrer name="operator&lt;(Float:,_:)"/>
			<referrer name="operator&lt;(_:,Float:)"/>
			<referrer name="operator&lt;=(Float:,_:)"/>
			<referrer name="operator&lt;=(_:,Float:)"/>
			<param name="value">
			</param>
		</member>
		<member name="M:floatabs" syntax="floatabs(value)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="CA_GetRoomCenter"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="value">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:floatadd" syntax="floatadd(oper1, oper2)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="operator+(Float:,_:)"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:floatcmp" syntax="floatcmp(oper1, oper2)">
			<attribute name="native"/>
			<referrer name="operator==(Float:,Float:)"/>
			<referrer name="operator==(Float:,_:)"/>
			<referrer name="operator!=(Float:,Float:)"/>
			<referrer name="operator!=(Float:,_:)"/>
			<referrer name="operator&gt;(Float:,Float:)"/>
			<referrer name="operator&gt;(Float:,_:)"/>
			<referrer name="operator&gt;(_:,Float:)"/>
			<referrer name="operator&gt;=(Float:,Float:)"/>
			<referrer name="operator&gt;=(Float:,_:)"/>
			<referrer name="operator&gt;=(_:,Float:)"/>
			<referrer name="operator&lt;(Float:,Float:)"/>
			<referrer name="operator&lt;(Float:,_:)"/>
			<referrer name="operator&lt;(_:,Float:)"/>
			<referrer name="operator&lt;=(Float:,Float:)"/>
			<referrer name="operator&lt;=(Float:,_:)"/>
			<referrer name="operator&lt;=(_:,Float:)"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:floatcos" syntax="floatcos(value, mode)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="CA_RayCastExplode"/>
			<referrer name="CA_IsPlayerNearWater"/>
			<referrer name="CA_IsPlayerFacingWater"/>
			<referrer name="CA_IsPlayerBlocked"/>
			<referrer name="CA_GetRoomCenter"/>
			<referrer name="pc_cmd_cjump"/>
			<referrer name="OnPlayerRequestClass"/>
			<param name="value">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="mode">
				<paraminfo>anglemode </paraminfo>
			</param>
		</member>
		<member name="M:floatdiv" syntax="floatdiv(dividend, divisor)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="operator/(Float:,_:)"/>
			<referrer name="operator/(_:,Float:)"/>
			<param name="dividend">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="divisor">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:floatmul" syntax="floatmul(oper1, oper2)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="operator*(Float:,_:)"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:floatpower" syntax="floatpower(value, exponent)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="CreateCustomExplosion"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="value">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="exponent">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:floatround" syntax="floatround(value, method)">
			<attribute name="native"/>
			<referrer name="CA_RayCastExplode"/>
			<referrer name="OnPlayerTakeDamage"/>
			<param name="value">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="method">
				<paraminfo>floatround_method </paraminfo>
			</param>
		</member>
		<member name="M:floatsin" syntax="floatsin(value, mode)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="CA_RayCastExplode"/>
			<referrer name="CA_IsPlayerNearWater"/>
			<referrer name="CA_IsPlayerFacingWater"/>
			<referrer name="CA_IsPlayerBlocked"/>
			<referrer name="CA_GetRoomCenter"/>
			<referrer name="pc_cmd_cjump"/>
			<referrer name="OnPlayerRequestClass"/>
			<param name="value">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="mode">
				<paraminfo>anglemode </paraminfo>
			</param>
		</member>
		<member name="M:floatsqroot" syntax="floatsqroot(value)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="CA_GetRoomHeight"/>
			<referrer name="CreateCustomExplosion"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="value">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:floatsub" syntax="floatsub(oper1, oper2)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="operator-(Float:,_:)"/>
			<referrer name="operator-(_:,Float:)"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:format" syntax="format(output[], len, format[], ...)">
			<attribute name="native"/>
			<referrer name="SetPlayerLastDamager"/>
			<param name="output">
				<paraminfo> [] </paraminfo>
				The string to output the result to
			</param>
			<param name="len">
				The maximum length output can contain
			</param>
			<param name="format">
				<paraminfo> [] </paraminfo>
				The format string
			</param>
			<param name="...">
				<paraminfo> {Float,_} </paraminfo>
				Indefinite number of arguments of any tag
			</param>
			<summary>Formats a string to include variables and other strings inside it.</summary>     <seealso name="print"/> <seealso name="printf"/> <remarks>This function doesn't support <a href="#strpack">packed strings</a>.</remarks> <remarks> <b>Format Specifiers:</b><p/> <ul> <li><b><c>%i</c></b> - integer (whole number)</li> <li><b><c>%d</c></b> - integer (whole number).</li> <li><b><c>%s</c></b> - string</li> <li><b><c>%f</c></b> - floating-point number (Float: tag)</li> <li><b><c>%c</c></b> - ASCII character</li> <li><b><c>%x</c></b> - hexadecimal number</li> <li><b><c>%b</c></b> - binary number</li> <li><b><c>%%</c></b> - literal <b><c>%</c></b></li> <li><b><c>%q</c></b> - escape a text for SQLite. (Added in <b>0.3.7 R2</b>)</li> </ul> </remarks> <remarks>The values for the placeholders follow in the exact same order as parameters in the call. For example, <b><c>"I am %i years old"</c></b> - the <b><c>%i</c></b> will be replaced with an Integer variable, which is the person's age.</remarks> <remarks>You may optionally put a number between the <b><c>%</c></b> and the letter of the placeholder code. This number indicates the field width; if the size of the parameter to print at the position of the placeholder is smaller than the field width, the field is expanded with spaces. To cut the number of decimal places beeing shown of a float, you can add <b><c>.&lt;max number&gt;</c></b> between the <b><c>%</c></b> and the <b><c>f</c></b>. (example: <b><c>%.2f</c></b>)</remarks>
		</member>
		<member name="M:funcidx" syntax="funcidx(name[])">
			<attribute name="native"/>
			<referrer name="OnFilterScriptExit"/>
			<referrer name="OnGameModeExit"/>
			<param name="name">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:main" syntax="main()">
			<attribute name="entry"/>
			<stacksize value="1"/>
		</member>
		<member name="M:pc_cmd_cjump" syntax="pc_cmd_cjump(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="13"/>
			<dependency name="operator-(Float:,_:)"/>
			<dependency name="operator+(Float:,_:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator*(Float:,Float:)"/>
			<dependency name="Float:operator=(_:)"/>
			<dependency name="GetPlayerVehicleID"/>
			<dependency name="GetVehicleModel"/>
			<dependency name="GetVehicleVelocity"/>
			<dependency name="GetVehicleZAngle"/>
			<dependency name="SSCANF__"/>
			<dependency name="SetVehicleAngularVelocity"/>
			<dependency name="SetVehicleVelocity"/>
			<dependency name="__file"/>
			<dependency name="__line"/>
			<dependency name="degrees"/>
			<dependency name="floatcos"/>
			<dependency name="floatsin"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_rustler" syntax="pc_cmd_rustler(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="15"/>
			<dependency name="CreateVehicle"/>
			<dependency name="DestroyPlayerVehicle"/>
			<dependency name="GetPlayerFacingAngle"/>
			<dependency name="GetPlayerPos"/>
			<dependency name="PlayerInfo"/>
			<dependency name="PlayerInfo"/>
			<dependency name="PutPlayerInVehicle"/>
			<dependency name="player_vehicle"/>
			<dependency name="random"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_st" syntax="pc_cmd_st(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="7"/>
			<dependency name="SendClientMessage"/>
			<dependency name="SetTimerEx"/>
			<dependency name="false"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:random" syntax="random(max)">
			<attribute name="native"/>
			<referrer name="pc_cmd_rustler"/>
			<param name="max">
			</param>
		</member>
		<member name="M:sscanf" syntax="sscanf(data[], format[], ...)">
			<stacksize value="1"/>
			<param name="data">
				<paraminfo> [] </paraminfo>
				The input string containing the data to parse out.
			</param>
			<param name="format">
				<paraminfo> [] </paraminfo>
				The format description of what the input data should contain.
			</param>
			<param name="...">
				<paraminfo> {T_WEAPON,Float,_} </paraminfo>
			</param>
			<library>sscanf</library>      <remarks>  The main entry point.  See the readme for vast amounts of information on how  to call this function and all the details on what it does.  This is a macro  that calls <c>SSCANF__</c> and passes the current file and line number as  well for improved error messages.  </remarks> 
		</member>
		<member name="M:sscanf_vehicle" syntax="sscanf_vehicle(string[])">
			<attribute name="public"/>
			<stacksize value="10"/>
			<dependency name="SSCANF_GetSimilarValue"/>
			<dependency name="strval"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
				The current word being parsed out of the <c>sscanf</c> input.
			</param>
			<library>sscanf</library>    <remarks>  The default implementation of <c>k&lt;vehicle&gt;</c>.  Finds the closest  vehicle by Levenshtein distance to the input.  </remarks> 
		</member>
		<member name="M:sscanf_weapon" syntax="sscanf_weapon(string[])">
			<attribute name="public"/>
			<stacksize value="10"/>
			<dependency name="SSCANF_GetSimilarValue"/>
			<dependency name="strval"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
				The current word being parsed out of the <c>sscanf</c> input.
			</param>
			<library>sscanf</library>    <remarks>  The default implementation of <c>k&lt;weapon&gt;</c>.  Finds the closest  weapon by Levenshtein distance to the input.  </remarks> 
		</member>
		<member name="M:strcat" syntax="strcat(dest[], source[], maxlength)">
			<attribute name="native"/>
			<referrer name="ForcePerkSelection"/>
			<param name="dest">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="source">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="maxlength">
			</param>
		</member>
		<member name="M:strins" syntax="strins(string[], substr[], pos, maxlength)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="SSCANF_OnGameModeInit"/>
			<referrer name="ForcePerkSelection"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="substr">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="pos">
			</param>
			<param name="maxlength">
			</param>
		</member>
		<member name="M:strval" syntax="strval(string[])">
			<attribute name="native"/>
			<referrer name="sscanf_weapon"/>
			<referrer name="sscanf_vehicle"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:unformat" syntax="unformat(data[], format[], ...)">
			<stacksize value="1"/>
			<param name="data">
				<paraminfo> [] </paraminfo>
				The input string containing the data to parse out.
			</param>
			<param name="format">
				<paraminfo> [] </paraminfo>
				The format description of what the input data should contain.
			</param>
			<param name="...">
				<paraminfo> {T_WEAPON,Float,_} </paraminfo>
			</param>
			- include <sscanf2> first.  <library>sscanf</library>      <remarks>  An alternative spelling of <c>sscanf</c>, requested by Kalcor because the  original doesn't match the C specification for the format descriptor.  This  is a macro that calls <c>UNFORMAT__</c> and passes the current file and line  number as well for improved error messages.  </remarks> 
		</member>

	</members>
</doc>
